#include "PacManStructs.z80asm"

; This is the entry point
.ent EntryPoint
.xent EntryPoint

; External symbols
BEEPER:
  .equ #03B5
CHAN_OPEN:
  .equ #1601
CL_LINE:
  .equ #0E44
KEY_SCAN:
  .equ #028E
OUT_CODE:
  .equ #15EF
OUT_SP_NO:
  .equ #192A
PR_STRING:
  .equ #203C
START:
  .equ #0000

; System variables
DF_SZ: 
  .equ #5C6B ; The number of lines (including one blank line) in the lower part of the screen.
FRAMES:
  .equ #5C78 ; 3 byte (least significant first), frame counter. Incremented every 20ms.
CHARS:
  .equ #5C36 ; 256 less than address of character set (which starts with space and carries 
             ; on to the copyright symbol). Normally in ROM, but you can set up your own in 
			 ; RAM and make CHARS point to it.
LAST_K:
  .equ #5C08 ; Stores newly pressed key
ATTR_P:
  .equ #5C8D ; Permanent current colors

; Pac-Man character set constants
PM_LEFT:
  .equ #25
PM_RIGHT: 
  .equ #28
PM_UP:
  .equ #27
PM_DOWN:
  .equ #26

; The code starts at the beginning of the print buffer area (#5B00)
  .org #5B00

; Checks if the point in a Hi-Score table entry is greater than
; a particular point
; IN:
;   IX: High score entry address
;   DE: Point to check
; OUT:
;   Carry is set if the point is greater than the entry point
CheckHsEntry:
  ld l,(ix+#03)        ; Get the point value from the Hi-Score entry
  ld h,(ix+#04)
  and a                ; Reset Carry
  sbc hl,de            ; Do the test
  ret                  ; Return with carry set, if point greater than 
                       ; the current entry

; Waits until no key is pressed
WaitForNoKey:
  push bc              ; Save regs
  push hl
`loop:
  call KEY_SCAN        ; Scan the keyboard
  ld a,#FF
  cp e                 ; E = #FF? 
  jr z,`nokey          ; Yes, no key is pressed
  jr `loop      
`nokey:
  xor a                ; Store 0
  ld (GhostFlags),a    ; to all ghost flags
  pop hl               ; Restore regs
  pop bc        
  ret                  ; Finished

; Sets the control mode according to the
; ControlMode variable
SetControlMode:
  call DelayForB
  ld a,(ControlMode)
  cp #00               ; Controlled from keyboard?
  jp z,SelectKeyboard  ; Yes, jump to Keyboard
  jp SelectKempston    ; No, jump to Kempston joystick

; Unused data
// $5B2B
  .defb 0, 0

; This subroutine checks if the current game point fits in the Hi-Score
; table. If it is so, it asks for the player name and stores the new
; score in the appropriate Hi-Score entry.
EnterHiScore:
  ld hl,(CurrentScore)
  ex de,hl             ; DE = game score
  ld bc,#0014          ; The last entry index offset in Hi-Score table
  ld ix,HiScoreTable   
  call CheckHsEntry    ; Current point is greater than the top entry
                       ; in the Hi-Score table?
  jr c,`newHiScore     ; Jump if there's a new Top Score

; Test the next Hi-Score table entry
`nextHsEntry:
  push bc              ; Save Hi-Score table offset
  ld bc,#0005          ; BC = Lenght of Hi-Score table entry
  add ix,bc            ; IX points to next entry
  pop hl               ; HL = last entry offset
  and a                ; Reset carry
  sbc hl,bc            
  ret c                ; Return if the entire Hi-Score table checked
  push hl
  pop bc               ; BC = subsequent Hi-Score offset
  call CheckHsEntry    
  jr c,`newHiScore     ; We found the Hi-Score entry shift down
  jr `nextHsEntry      ; Move to next entry

`newHiScore:
  ld hl,#0000
  and a
  sbc hl,bc            ; Is BC 0?
  push de              ; Save the current score
  push ix
  pop hl               ; HL points to the Hi-Score entry to enter
  push hl              ; Save the Hi-Score entry pointer
  jr z,`enterName      ; BC is zero, so no entries to move
  ld hl,HiScoreTable + 19 ; Last byte of entry 4 in H-Score table
  ld de,HiScoreTable + 24 ; Last byte of Hi-Score table
  lddr                    ; Shift down the Hi-Score table

; The player reached a Hi-Scrore
; At this point the stack stores the address of the Hi-Score entry
; and the score to store to that entry
`enterName:
  call ClearScreen
  ld bc,#0808
  call PrintAt         ; AT 8, 8
  ld hl,CONGRATS_MSG
  ld b,#10             
  call PrintMsg        ; Print Congrats
  ld bc,#0A00
  call PrintAt         ; AT 10, 0
  ld hl,YOURSCORE_MSG
  ld b,#58
  call PrintMsg        ; Print Hi-Score message
  ld bc,#100E
  push bc              ; Save position
  call PrintAt         ; AT 16, 14
  ld b,#03             ; Print 3...
`loop:         
  ld a,#3F
  rst #10              ; '?' characters
  djnz `loop
  pop bc               ; Restore position
  call PrintAt         ; AT 16, 14
  ld a,#41             ; A = 'A'
  push af
  rst #10              ; Print 'A'
  pop af
`nextNameChar:
  push bc
  push af
  call KEY_SCAN        ; Scan the keyboard
  ld a,#04
  cp e                 ; Is arrow left pressed?
  pop hl
  jr nz,`checkRight    ; No, check other keys

; Arrow left key pressed
  ld a,h              
  dec a                ; Decrement letter code
  cp #40               ; Reached '@'?
  jr nz,`storePrev
  ld a,#5A             ; Set letter to 'Z'
`storePrev:
  ld h,a               ; Save the current letter in H
`checkRight:
  ld a,#13
  cp e                 ; Is arrow right pressed?
  ld a,h
  jr nz,`storeNext

; Arrow right pressed
  inc a                ; Increment letter code 
  cp #5B               ; Reached '['?
  jr nz,`storeNext
  ld a,'A'             ; Set letter to 'A'
`storeNext:
  ld h,a               ; Save the current letter in H
  pop bc
  push de
  push hl
  call PrintAt         ; Set the current position
  pop hl
  pop de
  ld a,h
  rst #10              ; Print the current letter
  call DelayForB       ; Wait
  ld a,(GhostFlags) 
  bit 7,a
  call nz,WaitForNoKey ; Wait until the key is released
  ld a,#21
  cp e                 ; Is 'ENTER' pressed?
  ld a,h
  jr nz,`nextNameChar  ; No, back to check
  pop hl               ; HL points to the location in the Hi-Score table
  ld (hl),a            ; Store the specified letter
  inc hl               ; Increment name pointer
  push hl              ; Save name pointer
  xor a   
  set 7,a              ; A = #80 (Bit 7 set)
  ld (GhostFlags),a    ; Store the state flag
  inc c                ; Increment column position
  ld a,#11           
  cp c                 ; Column 17 reached?
  ld a,'A'             ; A = 'A'
  jr nz,`nextNameChar  ; There are still name letters to collect

; Now it's time to store the score value
  pop hl               ; restore Hi-Score pointer
  pop de               ; Restore game point
  ld (hl),e
  inc hl
  ld (hl),d            ; Store game point to Hi-Score table
  ret                  ; Finished

; Waits for 0.16 seconds
DelayForB: // $5BF1
  push bc
  ld b,#40
`loop1:
  push bc              ; 11T
  ld b,#FF             ; 7T
`loop2:
  push bc              ; 11T
  pop bc               ; 10T
  djnz `loop2          ; 13/8T -> inner loop: 8.670T
  pop bc               ; 10T
  djnz `loop1          ; 13/8T
  pop bc               ; outer loop -> 557.504T, 0.16 sec
  ret

; System variables area (#5C00-#5CB6)
SYS_VARS:
  .defb #FF, #00, #1C, #20, #FF, #00, #1E, #0D
  .defb #0D, #23, #05, #00, #00, #06, #10, #16
 ; $5c10
  .defb #01, #00, #06, #00, #0B, #00, #01, #00
  .defb #01, #00, #06, #00, #10, #00, #00, #00
 ; $5c20
  .defb #3E, #0A, #BD, #D0, #87, #BD, #D8, #21
  .defb #59, #6C, #C1, #E5, #C9, #E8, #00, #00
 ; $5c30
  .defb #00, #00, #00, #00, #00, #00, #00, #3C
  .defb #40, #00, #FF, #CC, #01, #7E, #5D, #7E
; $5c40
  .defb #5D, #00, #96, #1A, #FF, #FE, #FF, #01
  .defb #07, #01, #00, #CB, #5C, #CC, #5C, #B6
; $5c50
  .defb #5C, #B6, #5C, #CB, #5C, #DA, #5C, #CA
  .defb #5C, #CC, #5C, #D3, #5C, #D9, #5C, #D9
; $5c60
  .defb #00, #DB, #5C, #DB, #5C, #DB, #5C, #2D
  .defb #92, #5C, #18, #02, #00, #00, #FE, #FF
; $5c70
  .defb #01, #00, #E0, #C2, #B6, #1A, #DD, #FF
  .defb #7C, #5E, #90, #58, #7E, #00, #00, #21
; $5c80
  .defb #00, #00, #21, #17, #40, #40, #E0, #50
  .defb #21, #16, #21, #17, #03, #40, #00, #07
; $5c90
  .defb #00, #00, #00, #00, #00, #00, #00

; Hi-Score table with 5 entries in decreasing order
; An entry contains 3 byte for name + 2 byte for score
HiScoreTable: // $5c97
  .defm "YOU"
  .defw 500
  .defm "YOU" 
  .defw 400
  .defm "YOU"
  .defw 300
  .defm "YOU"
  .defw 200
  .defm "YOU"
  .defw 100

; Some data
  .defb #00, #00, #81, #5D, #FF, #FF

; Microdrive area (#5C00-#5CB6)
; Channel information
; Basic program
; Variables
MICRODRV_BUFF:
  .defb #F4, #09, #A8, #10, #4B, #F4, #09, #C4
  .defb #15, #53, #81, #0F, #C4, #15, #52, #F4
  .defb #09, #C4, #15, #50, #80, #80, #F9, #C0
  .defb #32, #39, #35, #38, #32, #0E, #00, #00
  .defb #8E, #73, #00, #0D, #80, #00, #00, #8E
  .defb #73, #00, #00, #0A, #00, #00, #34, #32
  .defb #35, #0E, #00, #00, #29, #40, #00, #0D
  .defb #80, #03, #4D, #2F, #43, #4F, #44, #45
  .defb #20, #20, #20, #20, #29, #40, #00, #40
  .defb #5B, #80, #00, #00, #00, #40, #00, #00
  .defb #00, #29, #40, #00, #00, #00, #00, #80
  .defb #80, #00, #00, #00, #40, #00, #00, #00
  .defb #00, #40, #00, #65, #5C, #00, #2B, #32
  .defb #35, #36, #0E, #00, #00, #00, #01, #00
  .defb #2A, #BE, #32, #33, #36, #35, #34, #E0
  .defb #57, #71, #06, #03, #03, #5C, #06, #03
  .defb #DB, #02, #DB, #02, #DB, #02, #D4, #FF
  .defb #08, #40, #DB, #02, #F3, #0D, #CE, #0B
  .defb #F0, #50, #DB, #02, #4D, #00, #F8, #53
  .defb #00, #00, #CE, #0B, #FD, #50, #04, #17
  .defb #DC, #0A, #DB, #02, #4D, #00, #B1, #33
  .defb #F3, #5C, #05, #00, #F3, #0D, #06, #03
  .defb #C0, #57, #71, #0E, #F3, #0D, #DB, #02
  .defb #DB, #02, #4D, #00, #DB, #5C, #8E, #01
  .defb #2B, #2D, #54, #8E, #A5, #A6, #94, #73
  .defb #03, #13, #0A, #6F, #28, #43, #29, #20
  .defb #41, #54, #41, #52, #49, #2C, #20, #49
  .defb #4E, #43, #2E, #20, #41, #4C, #4C, #20
  .defb #52, #49, #47, #48, #54, #53, #20, #52
  .defb #45, #53, #45, #52, #56, #45, #44, #2E
  .defb #00, #00, #00

; Starts playing the game.
; When the user presses the 'S' (Start) key, the program 
; start playing the game at this point.
StartGame:
  pop bc
  call PlayNewGame
  ld a,#3C         
  ld (CHARS+1),a       ; Set the normal character set in ROM 
  ld hl,GAME_OVER_MSG
  ld b,#0E
  call PrintMsg        ; Display "GAME OVER"
  call ScoreGame
  jp NextGame

; Scans the Kempston Joystick
ScanKempston:
  in a,(#1F)           ; Read Kempston port
  ld d,a               ; D = port data
  bit 0,d
  ld a,(PacManLastDir) ; Get direction status
  call nz,ControlRight ; Right pressed
  bit 1,d
  call nz,ControlLeft  ; Left pressed;
TestUpAndDown:
  bit 2,d
  call nz,ControlDown  ; Down pressed;
  bit 3,d
  call nz,ControlUp    ; Up pressed;
  ret                  ; Finished  

; Right direction selected
ControlRight:
  cp #28               ; Current direction is right?
  ret z                ; Return, if so
  ld a,'8'             ; A = Right arrow key code
  jr ControlStore

; Left direction selected;
ControlLeft:
  cp #25               ; Current direction is left?
  ret z                ; Return, if so
  ld a,'5'             ; A = Left arrow key code
  jr ControlStore

; Down direction selected
ControlDown:
  cp #26               ; Current direction is down?
  ret z                ; Return, if so
  ld a,'6'             ; A = Down arrow key code
  jr ControlStore

; Up direction selected;
ControlUp:
  cp #27               ; Current direction is up?
  ret z                ; Return, if so
  ld a,#37             ; A = Up arrow key
ControlStore:
  pop bc               ; Remove the address from stack
  ld (LAST_K),a        ; Store A as the last pressed key code
  ret

; When the game completed, the program enters here to 
; score the game. When a new Hi-Score is achieved, it
; ask for the user to enter name, and stores the results
; in the Hi-Score table.
ScoreGame:
  ld b,#0A             ; B = Wait counter
`loop:
  call DelayForB
  djnz `loop           ; Wait for appr. 1.6 seconds
  call ClearScreen
  ld a,#3C
  ld (CHARS+1),a       ; Set the ROM character set
  ld a,#46             ; BRIGTH, PAPER BLACK, INK YELLOW
  ld (ATTR_P),a        ; Set this permanent color
  call EnterHiScore    ; Check if there's a Hi-Score
  ld a,#40             ; ; BRIGTH, PAPER BLACK, INK WHITE
  ld (ATTR_P),a        ; Set this permanent color
  ret

; Displays the score for a ghost caught
; IN:
;   L: Contains the points for the ghost caught
DisplayGhostScore:
  push hl              ; Save HL
  call SmallScoreInL   ; Display the small score
  push bc              ; At this point, BC contains then position of 
                       ; the small "00". Save it.
  call GhostCaughtSound; Now, play the sound
  pop bc               ; Restore the position
  dec c                ; Now, BC points to Pac-Man's position.
  call ShowPacMan      ; Display Pac-Man
  nop                  ; Unused bytes, probably the traces of a fix
  nop
  nop
  nop
  ld a,(TempChar)      ; Get the character behind the small number
  cp #4B               ; Is it a dot?
  jr z,`useYellow      ; Jump, if so
  cp #4C               ; Is it a power pill?
  jr z,`useYellow      ; Jump, if so
  ld bc,#0001          ; PAPER BLACK, INK BLUE
  jr `setColor
`useYellow:
  ld bc,#0006          ; PAPER BLACK, INK YELLOW
`setColor:
  push af              ; Save the character to print
  call SetPrintColor   ; Set the color
  pop af               ; Restore the character
  rst #10              ; Print it
  pop hl               ; Restore HL
  ret                  ; Finished

;
L5E43:
  cp #E0
  jr nz,L5E4B
  ld a,#22
  jr L5E7D
L5E4B:
  cp #E8
  jr nz,L5E53
  ld a,#23
  jr L5E7D
L5E53:
  cp #F0
  jr nz,L5E5B
  ld a,#24
  jr L5E7D
L5E5B:
  cp #F8
  jr nz,L5E63
  ld a,#4D
  jr L5E7D
L5E63:
  cp #98
  jr nz,L5E6B
  ld a,#4E
  jr L5E7D
L5E6B:
  cp #A0
  jr nz,L5E73
  ld a,#2D
  jr L5E7D
L5E73:
  cp #D0
  jr nz,L5E7B
  ld a,#2E
  jr L5E7D
L5E7B:
  ld a,#2F
L5E7D:
  jp ShowSmallScore

L5E80:
  push bc
  call L5E43
  call L7971
  ld bc,(PacManPos)
  call PrintAt
  ld a,#20
  push af
  rst #10
  pop af
  rst #10
  pop bc
  ret

; The attribute color of power pill objects
PillAttr: // $5E96
  .defb #46;

; Sets the color attribute of power pill objects
; IN:
;   B: Power pill row
;   C: Power pill column
;   HL: Power pill attribute byte
SetPillAttr:
  push hl              ; Save HL
  call GetScreenChar   ; Get the character at position specified in BC
  pop hl               ; Restore HL
  cp #4C               ; Is the character a power pill?
  ret nz               ; No, return
  ld a,(PillAttr)         ; A=color attribute
  ld (hl),a            ; Sets the attribute byte pointed by HL
  ret				   ; Finished

L5EA4:
  ld a,(PillAttr)
  cp #00
  jr nz,L5EAF
L5EAB:
  ld a,#46
  jr L5EB0
L5EAF:
  xor a
L5EB0:
  ld (PillAttr),a
  ld bc,#0401
  ld hl,#5881
  call SetPillAttr
  ld bc,#041D
  ld hl,#589D
  call SetPillAttr
  ld bc,#1101
  ld hl,#5A21
  call SetPillAttr
  ld bc,#111D
  ld hl,#5A3D
  call SetPillAttr
  ret
L5ED8:
  ld b,#3F
  call PrintMsg
  jp HiScorePage
  
; Data Area #5EE0-#6031
  .defb #02, #BB, #5A, #30, #5F, #EE, #3D, #C8
  .defb #00

SELECT_MSG: // $5EE9
  .defb #16, #13, #00  ; AT 19, 0
  .defb #10, #05       ; INK CYAN
  .defm "SELECT : 1 - KEYBOARD CONTROLS  "
  .defb #16, #14, #09  ; AT 20, 9
  .defb #10, #05       ; INK CYAN
  .defm "2 - KEMPSTON JOYSTICK"
PRESS_S_MSG: // $5F28
  .defb #16, #16, #00  ; AT 22, 0
  .defb #06, #06       ; PRINT ,,
  .defb #10, #07       ; INK WHITE
  .defm "  PRESS 'S' TO START THE GAME "
; -- Done
POINTS_MSG: // $5F4D
  .defb #16, #00, #0A  ; AT 0, 10
  .defb #10, #06       ; INK YELLOW
  .defm "POINTS TABLE"
  .defb #16, #02, #05  ; AT 2, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "DOT"
  .defb #FA            ; 10 spaces
  .defb #10, #06       ; INK YELLOW
  .defb #90            ; (dot symbol)
  .defb #F6            ; 6 spaces
  .defm "10"
  .defb #16, #04, #05  ; AT 4, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "POWER PILL "
  .defb #F2            ; 2 spaces
  .defb #10, #06       ; INK YELLOW
  .defb #91            ; (power pill symbol)
  .defb #10, #06       ; INK YELLOW
  .defb #F6            ; 6 spaces
  .defm "50"
  .defb #16, #06, #05  ; AT 6, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "CHERRY"       
  .defb #F7            ; 7 spaces
  .defb #10, #02       ; INK RED
  .defb #A0            ; (cherry symbol)
  .defb #10, #06       ; INK YELLOW
  .defb #F5            ; 5 spaces
  .defm "100"
  .defb #16, #08, #05  ; AT 8, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "STRAWBERRY"
  .defb #F3            ; 3 spaces
  .defb #10, #02       ; INK RED
  .defb #A1            ; (strawberry symbol)
  .defb #10, #06       ; INK YELLOW
  .defb #F5            ; 5 spaces
  .defm "300"
  .defb #16, #0A, #05  ; AT 10, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "ORANGE"
  .defb #F7            ; 7 spaces
  .defb #10, #06       ; INK YELLOW
  .defb #A2            ; (orange symbol)
  .defb #F5            ; 5 spaces
  .defb #10, #06       ; INK YELLOW
  .defm "500" 
  .defb #16, #0C, #05  ; AT 12, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "APPLE"
  .defb #F8            ; 8 spaces
  .defb #10, #02       ; INK RED
  .defb #A3            ; (apple symbol)
  .defb #F5            ; 5 spaces
  .defb #10, #06       ; INK YELLOW
  .defm "700"
  .defb #16, #0E, #05  ; AT 14, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "LIME"
  .defb #F9            ; 9 spaces
  .defb #10, #04       ; INK GREEN
  .defb #A4            ; (lime symbol)
  .defb #F4            ; 4 spaces
  .defb #10, #06       ; INK YELLOW
  .defm "1000"
  .defb #16, #10, #05  ; AT 16, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "WHISTLE   "
  .defb #F3            ; 3 spaces
  .defb #10, #05       ; INK CYAN
  .defb #98            ; (whistle symbol)
  .defb #F4            ; 4 spaces
  .defb #10, #06       ; ink yellow
  .defm "2000"
  .defb #16, #12, #05  ; AT 18, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "BELL"
  .defb #F9            ; 9 spaces
  .defb #10, #06       ; INK YELLOW
  .defb #99            ; (bell symbol)
  .defb #F4            ; 4 spaces
  .defb #10, #06       ; INK YELLOW
  .defm "3000" 
  .defb #16, #14, #05  ; AT 20, 5
  .defb #10, #03       ; INK MAGENTA
  .defm "KEY"
  .defb #FA            ; 10 spaces
  .defb #10, #05       ; INK CYAN
  .defb #9F            ; (key symbol)
  .defb #F4            ; 4 spaces
  .defb #10, #06       ; INK YELLOW
  .defm "5000"

; Displays the Hu-Score page and allows the user to
; select control mode or start the game.
; The page allows about 8 seconds for user input
; before going to the demo page.
HiScorePage:
  ld hl,PRESS_S_MSG    
  ld b,37              ; (37 characters)            
  call PrintMsg        ; Prints the "PRESS 'S' TO..." message
  ld b,#32             ; Timing counter (0.16 second for each count)
`loop:
  push bc
  ld hl,#5A69          ; Attr address for "1 - KEYBOARD..." text
  ld de,#6989          ; D = Low byte for "1 - KEYBOARD..."
                       ; E = Low byte for "2 - KEMPSTON..."
  ld a,(LAST_K)
  cp 'S'               ; Is 'S' pressed?
  jp z,StartGame
  cp '1'               ; Is '1' pressed?
  call z,SelectKeyboard
  cp '2'               ; Is '2' pressed?
  call z,SelectKempston
  call SetControlMode
  pop bc
  djnz `loop
  ret

L605C:
  call L707F
  ld a,#D8 ; Opcode of RET C
L6061:
  ld (#7050),a
  ld hl,#6955
  ld (#69D6),hl
  ld a,#3C
  ld (CHARS+1),a   ; Set the normal character set in ROM
  call ClearScreen
  ret

; Some data
  nop
  nop
  nop

SCORES_MSG: // $6076
  .defb #16, #00, #04  ; AT 0, 4
  .defb #10, #06       ; INK YELLOW
  .defm "TODAY'S GREATEST SCORES"
  .defb #16, #0C, #09  ; AT 12, 9
  .defm "KEY FUNCTIONS"
  .defb #16, #0D, #09  ; AT 13, 9
  .defb #94            ; (arrow left symbol)
  .defb #F2            ; 2 spaces
  .defm "'5' OR 'O'"
  .defb #16, #0E, #09  ; AT 14, 9
  .defb #95            ; (arrow right symbol)
  .defb #F2            ; 2 spaces
  .defm "'8' OR 'P'"
  .defb #16, #0F, #09  ; AT 15, 9
  .defb #96            ; (arrow up symbol)
  .defb #F2            ; 2 spaces
  .defm "'7' OR 'Q'"
  .defb #16, #10, #09  ; AT 16, 9
  .defb #97            ; (arrow down symbol)
  .defb #F2            ; 2 spaces
  .defm "'6' OR 'A'"
  .defb #16, #11, #09  ; AT 17, 9
  .defm "HOLD: 'H' KEY"

CONGRATS_MSG: // $60EE
  .defm "CONGRATULATIONS!"

YOURSCORE_MSG: // $60FE
  .defm "YOUR SCORE IS IN TODAY'S TOP 5:-"
  .defm "PRESS "
  .defb #94            ; (arrow left symbol)
  .defm " AND "
  .defb #95            ; (arrow right symbol)
  .defm " TO SELECT INITIALS"
  .defm "THEN PRESS 'ENTER' KEY:-    "

GAME_OVER_MSG: // $615A
  .defb #16, #0B, #0B  ; AT 11,11
  .defb #10, #07       ; INK WHITE
  .defm "GAME OVER"

; Prints a message to the current channel
; IN:
;   B: Number of bytes to print
;   HL: Start address of message
; Remarks: If a character code is #F0 or greater, the value above #F0
;   specified the number of spaces to print
PrintMsg:
  push bc          ; Save the length
  ld a,(hl)        ; A = next character to print
  cp #F0           ; Is it a normal character?
  jr c,`normal     ; Go ahead, if normal
  sub #F0          ; Decrement with #F0
  ld b,a           ; B = number of spaces to print
`loop:
  ld a,#20         ; A = space
  rst #10          ; Print a space
  djnz `loop       ; As many, as specified in B
  jr `nextchar
`normal:
  rst #10          ; Print the character in A
`nextchar:
  inc hl           ; Increase address
  pop bc           ; Restore counter
  djnz PrintMsg    ; Loop until conter reaches zero
  ret              ; Finished

; Sets the attributes behind the "1 - KEYBOARD..." or
; "2 - KEMPSTON..." messages
; IN:
;   A: Color attribute
;   HL: First attribute address
ControlMsgAttr:
  ld b,21              ; 21 characters
`loop:
  ld (hl),a            ; Store the attribute
  inc hl               ; Next attribute address
  djnz `loop
  ret                  ; Finished

; Selects the keyboard as the control method
SelectKeyboard:
  ld l,d
  xor a                ; A = 0
  ld (ControlMode),a   ; Set control mode for keyboard
  ld a,#68             ; BRIGTH, PAPER CYAN, INK BLACK
  call ControlMsgAttr
  ld l,e
  ld a,#45             ; BRIGHT, PAPER BLACK, INK CYAN
  call ControlMsgAttr
  ret

; Selects Kempston joystick as the control method
SelectKempston:
  ld l,d
  ld (ControlMode),a
  ld a,#45             ; BRIGHT, PAPER BLACK, INK CYAN
  call ControlMsgAttr
  ld l,e
  ld a,#68             ; BRIGTH, PAPER CYAN, INK BLACK
  call ControlMsgAttr
  ret

L61A6:
  ld hl,PRESS_S_MSG
  ld b,#25
  call PrintMsg
  ld b,#32
L61B0:
  push bc
  ld a,(LAST_K)
L61B4:
  cp 'S'               ; Is 'S' pressed?
  jp z,StartGame
  call DelayForB
  pop bc
  djnz L61B0
  ret

; Data used to display the playground
TOP_TEXT: // #61C0
  .defm "SCORE>000000    "
  .defm "HI-SCORE>000000 "
PLAYGROUND: // #61E0
; Line 1
  .defb #62, #60, #60, #60, #60, #60, #60, #60
  .defb #60, #60, #60, #60, #60, #60, #60, #6B
  .defb #60, #60, #60, #60, #60, #60, #60, #60
  .defb #60, #60, #60, #60, #60, #60, #63, #20
; Line 2
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #61
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #20
; Line 3
  .defb #61, #4B, #62, #60, #60, #63, #4B, #62
  .defb #60, #60, #60, #60, #60, #63, #4B, #61
  .defb #4B, #62, #60, #60, #60, #60, #60, #63
  .defb #4B, #62, #60, #60, #63, #4B, #61, #20
; Line 4
  .defb #61, #4C, #64, #60, #60, #65, #4B, #64
  .defb #60, #60, #60, #60, #60, #65, #4B, #69
  .defb #4B, #64, #60, #60, #60, #60, #60, #65
  .defb #4B, #64, #60, #60, #65, #4C, #61, #20
; Line 5
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #20
; Line 6
  .defb #61, #4B, #66, #60, #60, #67, #4B, #62
  .defb #63, #4B, #66, #60, #60, #60, #60, #6B
  .defb #60, #60, #60, #60, #67, #4B, #62, #63
  .defb #4B, #66, #60, #60, #67, #4B, #61, #20
; Line 7
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #61
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #61
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #61
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #20
; Line 8
  .defb #64, #60, #60, #60, #60, #63, #4B, #61
  .defb #6C, #60, #60, #60, #60, #67, #20, #69
  .defb #20, #66, #60, #60, #60, #60, #6D, #61
  .defb #4B, #62, #60, #60, #60, #60, #65, #20
 ; Line 9
  .defb #20, #20, #20, #20, #20, #61, #4B, #61
  .defb #61, #20, #20, #20, #20, #20, #20, #20
  .defb #20, #20, #20, #20, #20, #20, #61, #61
  .defb #4B, #61, #20, #20, #20, #20, #20, #20
 ; Line 10
  .defb #66, #60, #60, #60, #60, #65, #4B, #64
  .defb #65, #20, #62, #60, #60, #60, #2A, #2A
  .defb #2A, #60, #60, #60, #63, #20, #64, #65
  .defb #4B, #64, #60, #60, #60, #60, #67, #20
 ; Line 11
  .defb #20, #20, #20, #20, #20, #20, #4B, #20
  .defb #20, #20, #61, #20, #29, #20, #29, #20
  .defb #29, #20, #29, #20, #61, #20, #20, #20
  .defb #4B, #20, #20, #20, #20, #20, #20, #20
; Line 12
  .defb #66, #60, #60, #60, #60, #63, #4B, #62
  .defb #63, #20, #64, #60, #60, #60, #60, #60
  .defb #60, #60, #60, #60, #65, #20, #62, #63
  .defb #4B, #62, #60, #60, #60, #60, #67, #20
; Line 13
  .defb #20, #20, #20, #20, #20, #61, #4B, #61
  .defb #61, #20, #20, #20, #20, #20, #20, #20
  .defb #20, #20, #20, #20, #20, #20, #61, #61
  .defb #4B, #61, #20, #20, #20, #20, #20, #20
; Line 14; 
  .defb #62, #60, #60, #60, #60, #65, #4B, #64
  .defb #65, #20, #66, #60, #60, #60, #60, #6B
  .defb #60, #60, #60, #60, #67, #20, #64, #65
  .defb #4B, #64, #60, #60, #60, #60, #63, #20
; Line 15
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #61
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #20
; Line 16
  .defb #61, #4B, #66, #60, #60, #63, #4B, #66
  .defb #60, #60, #60, #60, #60, #67, #4B, #69
  .defb #4B, #66, #60, #60, #60, #60, #60, #67
  .defb #4B, #62, #60, #60, #67, #4B, #61, #20
; Line 17
  .defb #61, #4C, #4B, #4B, #4B, #61, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #25
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #61, #4B, #4B, #4B, #4C, #61, #20
; Line 18;
  .defb #6C, #60, #60, #67, #4B, #69, #4B, #62
  .defb #63, #4B, #66, #60, #60, #60, #60, #6B
  .defb #60, #60, #60, #60, #67, #4B, #62, #63
  .defb #4B, #69, #4B, #66, #60, #60, #6D, #20
; Line 19
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #61
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #61
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #61
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #20
; Line 20
  .defb #61, #4B, #66, #60, #60, #60, #60, #6A
  .defb #6A, #60, #60, #60, #60, #67, #4B, #69
  .defb #4B, #66, #60, #60, #60, #60, #6A, #6A
  .defb #60, #60, #60, #60, #67, #4B, #61, #20
; Line 21
  .defb #61, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #4B, #4B
  .defb #4B, #4B, #4B, #4B, #4B, #4B, #61, #20
; Line 22
  .defb #64, #60, #60, #60, #60, #60, #60, #60
  .defb #60, #60, #60, #60, #60, #60, #60, #60
  .defb #60, #60, #60, #60, #60, #60, #60, #60
  .defb #60, #60, #60, #60, #60, #60, #65, #20
; Line 23
  .defb #20, #71, #20, #71, #20, #71, #20, #71
  .defb #20, #71, #20, #71, #20, #71, #20, #20
  .defb #5B, #5C, #5D, #5E, #5F, #53, #54, #5A
  .defb #5A, #5A, #5A, #5A, #5A, #5A, #5A, #20

; The #300 bytes of the plauground attributes
PG_ATTRS: // 64C0
; Line 1: Paper black, Ink bright white
  .defb #47, #47, #47, #47, #47, #47, #47, #47
  .defb #47, #47, #47, #47, #47, #47, #47, #47
  .defb #47, #47, #47, #47, #47, #47, #47, #47
  .defb #47, #47, #47, #47, #47, #47, #47, #47
; Line 2: Paper black; Ink bright blue
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #47
; Line 3: Paper black; Ink bright blue/bright yellow
  .defb #41, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #41
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #41, #47
; Line 4
  .defb #41, #46, #41, #41, #41, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #46, #41, #47
; Line 5
  .defb #41, #46, #41, #41, #41, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #46, #41, #47
; Line 6
  .defb #41, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #41, #47
; Line 7
  .defb #41, #46, #41, #41, #41, #41, #46, #41
  .defb #41, #46, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #46, #41, #41
  .defb #46, #41, #41, #41, #41, #46, #41, #47
; Line 8
  .defb #41, #46, #46, #46, #46, #46, #46, #41
  .defb #41, #46, #46, #46, #46, #46, #46, #41
  .defb #46, #46, #46, #46, #46, #46, #41, #41
  .defb #46, #46, #46, #46, #46, #46, #41, #47
; Line 9
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #47
; Line 10  
  .defb #47, #47, #47, #47, #47, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #47
; Line 11
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #42, #42
  .defb #42, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #47
; Line 12
  .defb #47, #47, #47, #47, #47, #47, #46, #46
  .defb #46, #46, #41, #41, #44, #44, #42, #42
  .defb #43, #43, #46, #46, #41, #41, #41, #41
  .defb #46, #46, #46, #46, #46, #46, #46, #47
; Line 13
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #47
; Line 14
  .defb #47, #47, #47, #47, #47, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #47
; Line 15
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #47
; Line 16
  .defb #41, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #41
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #41, #47
; Line 17
  .defb #41, #46, #41, #41, #41, #41, #46, #41
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #41
  .defb #46, #41, #41, #41, #41, #46, #41, #47
; Line 18
  .defb #41, #46, #46, #46, #46, #41, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #41, #46, #46, #46, #46, #41, #47
; Line 19
  .defb #41, #41, #41, #41, #46, #41, #46, #41
  .defb #41, #46, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #46, #41, #41
  .defb #46, #41, #46, #41, #41, #41, #41, #47
; Line 20
  .defb #41, #46, #46, #46, #46, #46, #46, #41
  .defb #41, #46, #46, #46, #46, #46, #46, #41
  .defb #46, #46, #46, #46, #46, #46, #41, #41
  .defb #46, #46, #46, #46, #46, #46, #41, #47
; Line 21
  .defb #41, #46, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #46, #41
  .defb #46, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #46, #41, #47
; Line 22
  .defb #41, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #46, #46
  .defb #46, #46, #46, #46, #46, #46, #41, #40
; Line 23
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
  .defb #41, #41, #41, #41, #41, #41, #41, #41
; Line 24
  .defb #00, #00, #00, #00, #00, #00, #00, #00
  .defb #00, #00, #00, #00, #00, #00, #00, #00
  .defb #42, #42, #46, #42, #44, #45, #46, #45
  .defb #45, #45, #45, #45, #45, #45, #45, #00

// #67C0
; The initial game state vector
; When a new game starts, this vector is copied to
; PacManPos (#2E bytes)
StartingGameState
  .defb #0F, #11       ; Pac-Man position: AT 15, 17
  .defb PM_LEFT        ; Pac-Man faces to left
  .defb #25, #0E, #0B, #01, #01
  .defb #00, #20, #02, #00, #0C, #0B, #01, #FF
  .defb #00, #20, #04, #00, #10, #0B, #01, #01
  .defb #00, #20, #03, #00, #12, #0B, #01, #01
  .defb #00, #20, #06, #00, #00, #01, #00, #00
  .defb #E5, #00, #00, #00, #14, #00

// $67EE
; Stores the current control mode
;   #00: Keyboard
;   Other: Kempston Joystick
ControlMode:
   .defb #00
   
// $67EF
   .defb #00

// $67F0
; The game's state vector (#2e bytes)
; The current position of Pac-Man, row + column
PacManPos:
  .defb #0F, #11
; Pac-Man's direction
PacManDir: // $67F2
  .defb PM_LEFT
PacManLastDir: // $67F3
  .defb PM_LEFT

; The table that stores the states of the 4 gosts
Ghost0State:
// $67F4
  .defb #0E, #0B, #01, #01, #00, #20, #02, #00
Ghost1State:
// $67FC
  .defb #0C, #0B, #01, #FF, #00, #20, #04, #00
Ghost2State:
// $6804
  .defb #10, #0B, #01, #01, #00, #20, #03, #00
Ghost3State:
// $680C
  .defb #12, #0B, #01, #01, #00, #20, #06, #00

; Some data stored between #6814-#681F
; 
L6814:
  .defb #00
; Game flags
// $6815
; Bit 0:
; Bit 1:
; Bit 2:
; Bit 3:
; Bit 4:
; Bit 5: Chase mode, Pac-Man can chase ghosts
; Bit 6: "Chase mode is about to expire" flash bit
; Bit 7:
GameFlags:
  .defb #01

// $6816
; Bit 0: Is Ghost #0 in chase mode?
; Bit 1: Is Ghost #1 in chase mode?
; Bit 2: Is Ghost #2 in chase mode?
; Bit 3: Is Ghost #3 in chase mode?
; Bit 4:
; Bit 5:
; Bit 6:
; Bit 7:
GhostFlags:
  .defb #00

// $6817
  .defb #00

; Points to the low 8 bit of the attribute address in the
; last screen row where the remaining Pac-Man lives are displayed
LastLiveLow: // $6818
  .defb #E3

CurrentScore: // $6819
  .defb #1A, #00

; ???
// $681B
  .defb #1A
; 
; The last point value given for a ghost
LastGhostPoint: // $681C
  .defw #0014

// $681E
; The current highest score
HiScore:
  .defw #01F4

  .comparebin "../MemoryFiles/PacManMemory.bin"

ShowMaze: 
  ld a,#3C         ; Use the standard character set in ROM
  ld (CHARS+1),a

; OPEN the UPPER SCREEN channel
  ld a,#02
  call CHAN_OPEN

; Write the text to the top line
  ld bc,#0020      ; 32 characters
  ld de,TOP_TEXT   ; "SCORE> ... HI-SCORE>..."
  call PR_STRING
  ld a,#7C         ; Use the character set at #7D00
  ld (CHARS+1),a

; Display the 23 lines of the playground
  ld bc,#02E0
  ld de,PLAYGROUND
  call PR_STRING

; Copy the #300 bytes of playground attributes
; to screen attributes
  ld bc,#0300
  ld hl,PG_ATTRS
  ld de,#5800
  ldir
  ret

; Gets the code of the character at the position specified by B and C
; IN:
;   B: Column number (0-31)
;   C: Row number (0-23)
CharOnScreen:
  ld hl,(CHARS)        ; HL = Address of the character set table - #100
  ld de,#0100
  add hl,de            ; HL = Address of the character set table

; Calculate the screen address of the position
; Move row position to Bit 5..Bit 7
  ld a,c               ; A = column number
  rrca
  rrca
  rrca
  and #E0              ;
  xor b                ; Move column position to Bit 0..Bit 7 
  ld e,a               ; E=Bit 0..Bit 7 of screen address
  ld a,c               ; A=row number 
  and #18              ; Keep only the most significant 2 bit of row
  xor #40              ; Set Bit 13..Bit 15 to '010'
  ld d,a               ; D=Bit 8..Bit 15 of screenaddress

; Iterate through all 96 characters in the generator table 
  ld b,96              ; B=counter (96)
`checkChar:
  push bc              ; Save counter
  push de              ; Save screen address
  push hl              ; Save character address
  ld a,(de)            ; XOR the screen byte and the first
  xor (hl)             ; character byte
  jr z,`firstByteMatch ; Jump, if first byte matches
  inc a                ; If a was #FF, not it's 0, meaning that
                       ; we're checking for an inverted character
  jr nz,`nextChar      ; Jump, if the first byte of character does not match
  dec a                ; At this point A is #FF
`firstByteMatch:
  ld c,a               ; C is 0 or #FF (if we look for inverted char)
  ld b,#07             ; Test the remaining 7 rows of the character
`nextByte:
  inc d                ; Next screen row
  inc hl               ; Next character byte
  ld a,(de)         
  xor (hl)             ; Check for match and consider
  xor c                ; the inverted state
  jr nz,`nextChar      ; No match
  djnz `nextByte       ; Loop until the entire character is tested
  pop bc               ; Match found, clean up the stack
  pop bc
  pop bc
  ld a,#80
  sub b                ; A=the code of the character found
  ld bc,#0001          ; BC=1, meaning that match found
  jr `finished
`nextChar:
  pop hl               ; HL=character address
  ld de,#0008          
  add hl,de            ; HL now points to the next character
  pop de               ; Restore screen address
  pop bc               ; Restore character counter
  djnz `checkChar      ; Loop until these is any character lect
  ld c,b               ; BC=0, meaning no match found
`finished:
  ret

; Gets the character from the specified screen position
; IN:
;   B: Row number (0-23)
;   C: Column number (0-31)
; OUT:
;   A: Code of the character at the specified position
GetScreenChar:
  push bc              ; Save BC to stack
  ld d,b
  ld e,c
  ld b,e               ; Exchange B and C
  ld c,d
  call CharOnScreen
  pop bc               ; Restore BC
  ret                  ; Finished

; Sets the print position
; IN: 
;   B: Row number (1-24)
;   C: Column number (0-31)
PrintAt:
  push bc          ; Save registers
  push ix
  ld a,#02         
  call CHAN_OPEN   ; Print to upper screen
  pop ix           ; Restore registers
  pop bc
  ld a,#16         ; 
  rst #10          ; Print "AT" code
  ld a,b
  rst #10          ; Print row number
  ld a,c
  rst #10          ; Print column number
  ret

L68AE:
  call L7230
  ld a,#76
  ld (hl),a
  ret

; Probably some data or unused
// $68b5
  nop
  xor d
; Some data
// $68b7
  nop
; Some data
// $68b8
  pop hl

; Sets the current PAPER and INK color
; IN:
;   B: PAPER color
;   C: INK color
SetPrintColor:
  ld a,#11         
  rst #10          ; Print 'PAPER'
  ld a,b           ; Use B as PAPER color
  rst #10          ; Print PAPER color
  ld a,#10        
  rst #10          ; Print INK
  ld a,c           ; Use C as INK color
  rst #10          ; Print INK color
  ret

; Prints the score stored in the HL register
PrintScore:
  push hl
  ld bc,#0007
  call SetPrintColor
  pop hl

; Print the decimal value of HL in five digits, using leading '0' characters
PrintHL:
  push hl          ; Save HL
  ld e,'0'         ; Use leading '0' (and not space)
  ld bc,-10000
  call OUT_SP_NO   ; Print the 1e5 decimal digit
  ld bc,-1000
  call OUT_SP_NO   ; Print the 1e4 decimal digit
  ld bc,-100
  call OUT_SP_NO   ; Print the 1e3 decimal digit
  ld c,#F6         ; BC = -10
  call OUT_SP_NO   ; Print the 1e2 decimal digit
  ld a,l
  call OUT_CODE    ; Print the digit in A (add it to '0')
  pop hl           ; Restore HL
  ret

; Check control keys
L68EC:
  ld a,(ControlMode)
  cp #00               ; Is controlled from keyboard?
  call nz,ScanKempston        ; No, handle Kempston joystick
  
; At this point, LAST_K points to the last direction key pressed.
; Kempston jostick handler sets LAST_K to emulate key strokes
  ld a,(LAST_K)
  cp '5'
  jp z,L6B03
  cp '6'
  jp z,L6B0C
  cp '7'
  jp z,L6B15
  cp '8'
  jp z,L6B1E
  cp 'O'
  jp z,L6B03
  cp 'A'
  jp z,L6B0C
  cp 'Q'
  jp z,L6B15
  cp 'P'
  jp z,L6B1E
  cp 'H'
  jr z,L6926
  jp L6B8F
L6926:
  ld hl,(FRAMES)       ; Save FRAMES to HL
`whileH:
  ld a,(LAST_K)        ; Check the last key again
  cp 'H'               ; Is this still 'H'?
  jr z,`whileH         ; Yes.
  ld (FRAMES),hl       ; Restore frame count
  ret                  ; Finished

; Waits for B*0.25 millisecond
Wait025:
  push bc
  ld b,#FF             ; Internal loop counter
`loop:
  push bc              ; 11T
  pop bc               ; 10T
  djnz `loop           ; 13T
  pop bc
  djnz Wait025
  ret

; Checks direction keys
L693F:
  ld a,#F7
  in a,(#FE)           ; Read keyboard row '1'...'5'
  cpl
  ld d,a
  bit 0,d
  ld a,(PacManLastDir)
  call nz,ControlLeft
  bit 1,d
  call nz,ControlRight ; Right key pressed
  jp TestUpAndDown      ; 
L6955:
  call L693F
  jp L68EC
L695B:
  ld a,(#68B8)
  inc a
  ld (#68B8),a
  cp #C8
  call z,L786C
  ld a,(#68B8)
  cp #FF
  call z,L787F
  ld bc,(PacManPos)
  call ShowGapingPacMan
  call L7C42
  ld a,(GhostFlags)
  bit 0,a              ; I Ghost #0 Caught?
  call nz,L6BED        ; Yes.
  ld a,(GhostFlags)
  bit 1,a
  call nz,L6BFB
  ld a,(GhostFlags)
  bit 2,a
  call nz,L6C09
  ld a,(GhostFlags)
  bit 3,a
  call nz,L6C17
  call L76CB
  call L7BAF
  ld b,#06
  call Wait025
  call L76CB
  ld b,#06
  call Wait025
  call L76CB
  ld a,(GhostFlags)
  bit 0,a
  call nz,L6BED
  ld a,(GhostFlags)
  bit 1,a
  call nz,L6BFB
  ld a,(GhostFlags)
  bit 2,a
  call nz,L6C09
  ld a,(GhostFlags)
  bit 3,a
  call nz,L6C17
  call PrintGhosts
  call L76CB
  call L6955
  ld a,(#681B)
  cp #EC
  jp nc,L6ED5
  ld a,(GameFlags)
  bit 5,a
  jr z,L69EB
  ld a,#04
  jr L69ED
L69EB:
  ld a,#06
L69ED:
  ld (#69A0),a
  ld (#69A8),a
  ld (#6A37),a
  ld (#6A3F),a
  call FlipGhost
  call PrintGhosts
  ld a,(GameFlags)
  bit 4,a
  jr z,L6A13
  ld d,a
  ld a,(#68B7)
  cpl
  ld (#68B7),a
  cp #00
  ld a,d
  jr nz,L6A30
L6A13:
  bit 0,a
  call nz,L6BED
  ld a,(GameFlags)
  bit 1,a
  call nz,L6BFB
  ld a,(GameFlags)
  bit 2,a
  call nz,L6C09
  ld a,(GameFlags)
  bit 3,a
  call nz,L6C17
L6A30:
  call L5EA4
  call L76CB
  ld b,#06
  call Wait025
  call L76CB
  ld b,#06
  call Wait025
  call L76CB
  ld a,(GhostFlags)
  bit 0,a
  call nz,L6BED
  ld a,(GhostFlags)
  bit 1,a
  call nz,L6BFB
  ld a,(GhostFlags)
  bit 2,a
  call nz,L6C09
  ld a,(GhostFlags)
  bit 3,a
  call nz,L6C17
  call L756D
  call PrintGhosts
  call L7A50
  ld hl,(FRAMES)
  push hl
  ld bc,#0700
  and a
  sbc hl,bc
  pop hl
  jr c,L6AAC
  ld bc,#0900
  and a
  sbc hl,bc
  ld a,(GameFlags)
  jr nc,L6A8E
  set 5,a
  ld (GameFlags),a
  jr L6AAC
L6A8E:
  res 6,a
  res 5,a
  res 4,a
  set 0,a
  ld (GameFlags),a
  ld hl,#0014          ; Set the last ghost point to 20
  ld (LastGhostPoint),hl
  xor a
  ld (FRAMES),a
  ld (FRAMES+1),a
  ld (#6817),a
  call PrintGhosts
L6AAC:
  ld a,(GameFlags)
  bit 5,a
  jr z,L6AB7
  xor a
  ld (#6817),a
L6AB7:
  call PrintGhosts
  call L76CB
  ld a,(#681B)
  cp #EC
  jp nc,L6ED5
  ld a,(#6817)
  cp #2F
  jp nc,L695B
  inc a
  ld (#6817),a
  cp #2D
  jr c,L6ADC
  ld a,(GameFlags)
  set 3,a
  jr L6AF5
L6ADC:
  cp #1E
  jr c,L6AE7
  ld a,(GameFlags)
  set 2,a
  jr L6AF5
L6AE7:
  cp #0F
  jr c,L6AFB
  ld a,(GameFlags)
  set 1,a
  ld b,#05
  call Wait025
L6AF5:
  ld (GameFlags),a
  jp L695B
L6AFB:
  ld b,#07
  call Wait025
  jp L695B
L6B03:
  ld a,#25
  ld bc,(PacManPos)
  dec c
  jr L6B25
L6B0C:
  ld a,#26
  ld bc,(PacManPos)
  inc b
  jr L6B25
L6B15:
  ld a,#27
  ld bc,(PacManPos)
  dec b
  jr L6B25
L6B1E:
  ld a,#28
  ld bc,(PacManPos)
  inc c
L6B25:
  ld (PacManLastDir),a
  ld a,c
  cp #FF
  jr z,L6B8F
  cp #1F
  jr z,L6B8F
  call GetScreenChar
  push bc
  pop de
  cp #29
  jp z,L6B84
  cp #76
  jp z,L6B84
  cp #77
  jp z,L6B84
  cp #4C               ; Power pill?
  jp z,GotPowerPill    ; Yes, collect it
  cp #4B
  jp z,L6EAD
  cp #2B
  jp z,L7595
  cp #2C
  jp z,L78FB
  cp #20
  jp nz,L6B8F

; Sets the new position of Pac-Man, and display it
; IN:
;   D: New row position
;   E: New column position
PositionPacMan:
  ld bc,(PacManPos)    ; BC = the last position of Pac-Man
  ld (PacManPos),de    ; Store the new position of Pac-Man
  push de              ; Save the new position
  call PrintAt 
  ld a,' '     
  rst #10              ; Print a space to the last position
  pop bc
  push bc              ; BC = new position
  call SetNormalPacMan
  pop bc

; Displays Pac-Man to the position specified in BC
; IN:
;   B: row position
;   C: column position
; Remark Stores the previous Pac-Man symbol as the current
ShowPacMan:
  call PrintAt         ; PRINT AT -- Pac-Man position
  ld bc,#0006     
  call SetPrintColor   ; PAPER BLACK, INK YELLOW
  ld a,(PacManLastDir) ; A = last Pac-Man symbol
  ld (PacManDir),a     ; Store as the current symbol
  rst #10              ; Print Pac-Man
  ret

;
L6B84:
  ld a,(GameFlags)
  bit 5,a
  jp z,L6FF5
  jp L6F14
L6B8F:
  ld bc,(PacManPos)
  ld a,(PacManDir)
  ld (PacManLastDir),a
  cp #25
  jr z,L6BA7
  cp #26
  jr z,L6BB1
  cp #27
  jr z,L6BB4
  jr L6BB7
L6BA7:
  dec c
  ld a,c
  cp #FF
  jr nz,L6BBF
  ld c,#1E
  jr L6BBF
L6BB1:
  inc b
  jr L6BBF
L6BB4:
  dec b
  jr L6BBF
L6BB7:
  inc c
  ld a,c
  cp #1F
  jr nz,L6BBF
  ld c,#00
L6BBF:
  call GetScreenChar
  push bc
  pop de
  cp #29
  jp z,L6B84
  cp #76
  jp z,L6B84
  cp #77
  jp z,L6B84
  cp #4C               ; Power pill?
  jp z,GotPowerPill    ; Yes, collect it
  cp #4B
  jp z,L6EAD
  cp #2B
  jp z,L7595
  cp #2C
  jp z,L78FB
  cp #20
  ret nz
  jp PositionPacMan

L6BED:
  ld ix,Ghost0State
  ld a,(GhostFlags)
  bit 0,a
  jr z,L6C25
  jp L73CC
L6BFB:
  ld ix,Ghost1State
  ld a,(GhostFlags)
  bit 1,a
  jr z,L6C25
  jp L73CC
L6C09:
  ld ix,Ghost2State
  ld a,(GhostFlags)
  bit 2,a
  jr z,L6C25
  jp L73CC
L6C17:
  ld ix,Ghost3State
  ld a,(GhostFlags)
  bit 3,a
  jr z,L6C25
  jp L73CC

; Now, IX points to the beginning of ghost state
L6C25:
  ld l,(ix+#00)        ; L=Ghost column
  ld h,(ix+#01)        ; H=Ghost row
  ld a,#0A             
  cp h                 ; Is the gost in row 10?
  jr z,`row10          ; Yes, jump
  inc a                
  cp h                 ; Is the ghost in row 11?
`row10:
  call z,L7071         ; Invoke if ghost is in row 10 or 11
  nop
  call L7682
  ld a,(GameFlags)
  bit 5,a
  jr nz,L6C52
  ld a,(PacManPos)
  sub (ix+#00)
  jp z,L727E
  ld a,(PacManPos+1)
  sub (ix+#01)
  jp z,L7299
L6C52:
  ld a,(FRAMES)
  bit 3,a
  jr nz,L6CAE

; Check the vertical movement of the ghost
L6C59:
  ld c,(ix+#00)        ; C=Ghost column
  ld b,(ix+#01)        ; B=Ghost row
  ld a,c
  cp #FF               ; Is column set to -1?
  jr z,L6CAE           ; Yes, jump
  cp #1F               ; Is column set to 31?
  jr z,L6CAE           ; Yes, jump
  ld a,b               
  sub (ix+#02)         ; Row velicity
  ld b,a               ; B=new row modified with velocity
  call GetScreenChar   ; Get the character at the new ghost position
  ld d,a               ; Save the character
  ld a,(PacManDir)     ; This is the current Pac-Man character
  cp d                 ; Did the ghost catch Pac-Man?
  ld a,d               ; Restore the character
  jp z,L6D0D           ; Jump, if so
  cp #4C               ; Power pill?
  jp z,L6D0D           ; Jump, if so
  cp #4B               ; Dot?
  jp z,L6D0D           ; Jump, if so
  cp #20               ; Space?
  jp z,L6D0D           ; Jump, if so
  cp #29               ; Ghost?
  jp z,L6D0D           ; Jump, if so
  cp #76               ; Ghost A?
  jp z,L6D0D           ; Jump, if so
  cp #77               ; Ghost B?
  jp z,L6D0D           ; Jump, if so
  cp #2B               ; Soul?
  jp z,L6D0D           ; Jump, if so
  cp #2C               ; Cherry?
  jp z,L6D0D           ; Jump, if so
  cp #2A               ; Door?
  jr nz,L6CAE          ; Nothing that would need special treatement

; At this point we check the door
  ld h,(ix+#01)        ; Get row coordinate
  ld a,#0B             
  cp h                 ; Is the ghost inside the door?
  ld a,d
  jr z,L6D0D           ; No, handle it the normal way

; Check the horizontal movement of ghost
L6CAE:
  ld c,(ix+#00)        ; C=ghost column
  ld b,(ix+#01)        ; B=ghost row
  ld a,c               
  sub (ix+#03)         
  ld c,a               ; C=new ghost column position 
  cp #FF               ; Is it -1 (the ghost leaves at the left edge)?
  jr nz,`checkLeft          ; No, go on.
  ld c,#1E             ; Yes, set to to 30 (the ghost comes back on the right) 
`checkLeft:
  cp #1F               ; Is it 31 (the ghost leaves at the right edge)
  jr nz,L6CC5          ; No, go on.
  ld c,#00             ; Yes, set to 0 (the ghost comes back on the left)

; At this point BC contains the new ghost position
L6CC5:
  call GetScreenChar   ; A=character in the new ghost position
  ld d,a               ; Save to D
  ld a,(PacManDir)     ; Get the current Pac-Man character
  cp d                 ; Did the ghost catch Pac-Man?
  ld a,d               ; Restore the character
  jr z,L6D14           ; Jump, if so
  cp #4C               ; Power pill?
  jr z,L6D14           ; Jump, if so
  cp #4B               ; Dot?
  jr z,L6D14           ; Jump, if so
  cp #20               ; Space?
  jr z,L6D14           ; Jump, if so
  cp #29               ; Ghost?
  jr z,L6D14           ; Jump, if so
  cp #76               ; Ghost A?
  jr z,L6D14           ; Jump, if so
  cp #77               ; Ghost B?
  jr z,L6D14           ; Jump, if so
  cp #2B               ; Soul?
  jr z,L6D14           ; Jump, if so
  cp #2C               ; Cherry?
  jr z,L6D14           ; Jump, if so
  ld a,(ix+#04)
  cp #00
  jr z,L6D02
  ld a,(ix+#02)
  cpl
  inc a
  ld (ix+#02),a
  jp L705D

; Turns back the ghost
L6D02:
  ld a,(ix+#03)        ; Obtain ghost velocity
  cpl
  inc a                ; Negate it
  ld (ix+#03),a        ; Store back
  jp L6C59

L6D0D:
  push af
  xor a
  ld (ix+#04),a
  jr L6D1A

L6D14:
  push af
  ld a,#01
  ld (ix+#04),a

L6D1A:
  push bc
  call PrintAt
  ld a,(GameFlags)
  bit 5,a
  jr nz,L6D32
  ld b,#00
  ld c,(ix+#06)
  call SetPrintColor
  ld a,#29
  rst #10
  jr L6D44
L6D32:
  bit 6,a
  jr nz,L6D3B
  ld bc,#0005
  jr L6D3E
L6D3B:
  ld bc,#0007          ; PAPER BLACK, INK WHITE
L6D3E:
  call SetPrintColor   ; Set color
  ld a,#29             ; Ghost symbol
  rst #10              ; Print the ghost
L6D44:                 
  pop de
  ld c,(ix+#00)
  ld b,(ix+#01)
  ld (ix+#00),e
  ld (ix+#01),d
  call PrintAt
  ld a,(ix+#05)
  push af
  cp #2C
  call z,L78E8
  cp #2A
  jr nz,L6D66
  ld bc,#0002
  jr L6DA4
L6D66:
  cp #2B
  jr nz,L6D6F
  ld bc,#0005
  jr L6DA4
L6D6F:
  cp #4B
  jr nz,L6D78
  ld bc,#0006
  jr L6DA4
L6D78:
  cp #4C
  jr nz,L6D81
  ld bc,#0006
  jr L6DA4
L6D81:
  cp #76
  jr z,L6D8F
  cp #77
  jr z,L6D8F
  cp #29
  jr z,L6D8F
  jr L6DA1
L6D8F:
  ld b,#00
  ld a,(GameFlags)
  bit 5,a
  jr z,L6D9C
  ld c,#05
  jr L6DA4
L6D9C:
  ld c,(ix+#07)
  jr L6DA4
L6DA1:
  ld bc,#0006          ; PAPER BLACK, INK YELLOW
L6DA4:
  call SetPrintColor   ; Set color
  pop af
  rst #10
  pop af
  ld (ix+#05),a
  ld d,a
  ld a,(PacManDir)
  cp d
  jr z,L6DCA
  ld a,d
  cp #29
  jp z,L7233
  cp #76
  jp z,L7233
  cp #77
  jp z,L7233
  cp #2B
  call z,L68AE
  ret

;
L6DCA:
  ld a,#20
  ld (ix+#05),a
  ld bc,(PacManPos)
  call ShowPacMan
  ld a,(GameFlags)
  bit 5,a
  jr nz,L6DE1
  pop bc
  jp L6FF9
L6DE1:
  ld bc,(PacManPos)    ; BC=Pac-Man's position
  call ShowPacMan      ; Display Pac-Man
  jp PacManCaughtGhost ; Handle any ghost that has been caught

; seems to be unused
  nop
  nop
  nop
  nop
  nop

;
L6DF0:
  ld a,(PacManPos+1)
  sub (ix+#01)
  jp p,L6DFB
  cpl
  inc a
L6DFB:
  cp #0F
  ret nc
  ld a,(PacManPos)
  sub (ix+#00)
  jp p,L6E09
  cpl
  inc a
L6E09:
  cp #14
  ret nc
  call L6E39
  xor a
  sub (ix+#04)
  jr z,L6E27
  ld a,(PacManPos+1)
  cp (ix+#01)
  jr c,L6E21
  ld a,#FF
  jr L6E23
L6E21:
  ld a,#01
L6E23:
  ld (ix+#02),a
  ret
L6E27:
  ld a,(PacManPos)
  cp (ix+#00)
  jr c,L6E33
  ld a,#FF
  jr L6E35
L6E33:
  ld a,#01
L6E35:
  ld (ix+#03),a
  ret

L6E39:
  ld bc,#6EAC
  ld a,(GameFlags)
  bit 5,a
  jr nz,L6E49
  xor a
  ld (bc),a
  ld a,#38
  jr L6E9D
L6E49:
  push ix
  pop de
  ld hl,Ghost0State
  and a
  sbc hl,de
  jr nz,L6E5C
  ld a,(bc)
  bit 0,a
  ret nz
  set 0,a
  jr L6E8A
L6E5C:
  ld hl,Ghost1State
  and a
  sbc hl,de
  jr nz,L6E6C
  ld a,(bc)
  bit 1,a
  ret nz
  set 1,a
  jr L6E8A
L6E6C:
  ld hl,Ghost2State
  and a
  sbc hl,de
  jr nz,L6E7C
  ld a,(bc)
  bit 2,a
  ret nz
  set 2,a
  jr L6E8A
L6E7C:
  ld hl,Ghost3State
  and a
  sbc hl,de
  jr nz,L6E9B
  ld a,(bc)
  bit 3,a
  ret nz
  set 3,a
L6E8A:
  ld (bc),a
  ld a,(ix+#02)
  cpl
  inc a
  ld (ix+#02),a
  ld a,(ix+#03)
  cpl
  inc a
  ld (ix+#03),a
L6E9B:
  ld a,#30
L6E9D:
  ld (#6E1B),a
  ld (#6E2D),a
  ret
L6EA4:
  cp #16
  jp z,L6B03
  jp L7A59

; Some Data
// $6EAC
  .defb #00

L6EAD:
  call PositionPacMan

; Pac-Man collected a dot
DotCollected:
  call L7342
  ld hl,(CurrentScore) ; HL=current score
  inc hl               ; Increase it

; Pac-Man collected either a dot or a power pill at this point
PillCollected:
  push hl              ; Save the current point
  ld bc,#0006          ; AT 0,6
  call PrintAt
  pop hl               ; Restore the current point,
  call PrintScore      ; Print it,
  ld (CurrentScore),hl ; and store back
  call SetHiScore
  ld a,(#681B)
  inc a
  cp #EC
  jr nc,L6ED4
  ld (#681B),a
  ret
L6ED4:
  pop bc
L6ED5:
  xor a
  ld (#681B),a
  ld bc,#0028
  ld de,PacManPos
  ld hl,#67C0
  ldir
  ret

; The program enters this location when Pac-Man
; has collected a power pill
GotPowerPill:
  call PositionPacMan  ; Display Pac-Man in its new position
  call PlayCollectBeep
  ld hl,#0700
  ld (FRAMES),hl       ; Sign that chasing starts
  ld a,(GameFlags)     ; Load flags
  set 4,a              ; ???
  set 5,a              ; ???
  ld (GameFlags),a     ; Store modified flags
  ld a,#14 
  ld (LastGhostPoint),a; Set the last ghost point to 20
  ld hl,(CurrentScore) ; Get the current score
  ld bc,#0005 
  add hl,bc            ; Increase it with 50 points
  jp PillCollected

; The application starts initialization at this point
StartInit:
  ld b,#14 ; Delay for 3 seconds
`DelayLoop:
  call DelayForB
  djnz `DelayLoop
  jp Init

L6F14:
  call PositionPacMan

; The progam enters here when PacMan has caught a ghost.
; 
PacManCaughtGhost:
  ld ix,Ghost0State    ; IX points to the state information of ghosts
  ld a,(GhostFlags)    ; A contains information about ghost states
  ld b,#04             ; We have 4 ghosts
`checkGhost:                 
  push bc              ; Save the counter
  sra a                ; Is the current ghost in chase mode?
  push af              ; Save the flags
  jr c,`loop           ; Yes, Pac-Man cannot catch it

; This ghost flees from Pac-Man
  ld bc,(PacManPos)    ; BC=Pac-Man's position
  ld l,(ix+#00)        ; HL=Ghost's position
  ld h,(ix+#01)
  and a
  sbc hl,bc            ; Check if Pac-Man has caught the ghost
  push ix              ; Save to ghost state pointer
  call z,GhostCaught   ; Handle that Pac-Man has just caught a ghost
  pop ix               ; Restore the pointer
`loop:
  ld bc,#0008          
  add ix,bc            ; IX now points to the next ghost's state info
  pop af               ; Restore state flags
  pop bc               ; Restore counter
  djnz `checkGhost     ; Go on checking the next ghost
  ld a,(GhostFlags)
  res 7,a
  ld (GhostFlags),a
  ret

; Pac-Man has caught a ghost
; IN:
;   IX: Points to the ghost state information
GhostCaught:
  push ix              ; Save the state pointer
  pop hl               ; HL no points to ghost state
  ld bc,#0005          
  add hl,bc            ; Point to state info + 5 byte
  ld a,(hl)            ; A=character behind the ghost
  push af              ; Save the character
  cp #2C               ; Cherry?
  call z,L78FE         ; Yes, handle cherry
  pop af               ; Restore the character
  cp #4B               ; Dot?
  jr nz,L6F7B          ; Jump, if something else
  ld a,(GhostFlags)    ; 
  bit 7,a
  jr nz,L6F7B
  set 7,a
  ld (GhostFlags),a
  ld a,(#681B)
  inc a
  ld (#681B),a
  push hl              ; Save HL (points to the char behind ghost)
  ld hl,(CurrentScore) ; Add the point (because of dot) to the current score
  inc hl
  ld (CurrentScore),hl ; Store the new score
  pop hl               ; Restore HL
L6F7B:
  ld a,#20             
  ld (hl),a            ; Set the character behind ghost to a space
  push ix              ; Save the ghost state pointer
  ld hl,(LastGhostPoint) ; Get the last ghost point
  push hl              ; Save it
  call DisplayGhostScore           ; ...
  pop bc               
  add hl,bc
  ld (LastGhostPoint),hl
  ld hl,(CurrentScore) 
  add hl,bc            ; Increment the score with the hit value
  push hl              ; Save  the score
  ld bc,#0006          ; Current score position
  call PrintAt         ; Set  this position
  pop hl               ; Restore score
  ld (CurrentScore),hl ; Store the score
  call PrintScore      ; Display it
  call SetHiScore
  pop de               ; DE=ghost state pointer
  ld hl,Ghost0State
  and a
  sbc hl,de
  jr nz,L6FB1
  ld a,(GhostFlags)
  set 0,a
  jr L6FDB
L6FB1:
  ld hl,Ghost1State
  and a
  sbc hl,de
  jr nz,L6FC0
  ld a,(GhostFlags)
  set 1,a
  jr L6FDB
L6FC0:
  ld hl,Ghost2State
  and a
  sbc hl,de
  jr nz,L6FCF
  ld a,(GhostFlags)
  set 2,a
  jr L6FDB
L6FCF:
  ld hl,Ghost3State
  and a
  sbc hl,de
  ret nz
  ld a,(GhostFlags)
  set 3,a
L6FDB:
  ld (GhostFlags),a
  ret
L6FDF:
  ld hl,Ghost0State
L6FE2:
  push hl
  ld c,(hl)
  inc hl
  ld b,(hl)
  call GetScreenChar
  ld hl,PacManDir
  cp (hl)
  pop hl
  ret z
  ld bc,#0008
  add hl,bc
  jr L6FE2
L6FF5:
  pop bc
  call PositionPacMan
L6FF9:
  call L7511
  push hl
  ld hl,Ghost0State
  ld b,#04
L7002:
  push bc
  ld c,(hl)
  inc hl
  ld b,(hl)
  push hl
  call PrintAt
  pop hl
  inc hl
  inc hl
  inc hl
  inc hl
  ld a,(hl)
  cp #4C
  jr nz,L7019
  ld bc,#0006
  jr L702B
L7019:
  cp #2A
  jr nz,L7022
  ld bc,#0002
  jr L702B
L7022:
  cp #4B
  ld bc,#0006
  jr z,L702B
  ld a,#20
L702B:
  push af
  call SetPrintColor
  pop af
  rst #10
  inc hl
  inc hl
  inc hl
  pop bc
  djnz L7002
  pop hl
  call L7355
  ld bc,#0028
  ld hl,#67C0
  ld de,PacManPos
  ldir
  ld a,(LastLiveLow)
  dec a
  dec a
  ld (LastLiveLow),a
  cp #E1
L7050:  
  ret c     ; The code changes this to RET/RET C dynamically
  ld b,#00
  ld h,#5A
  ld l,a
  ld (hl),b
  call PrintGhosts
  jp L707F
L705D:
  ld a,(ix+#04)
  inc a
  ld (ix+#04),a
  cp #04
  jp c,L6C59
  ld a,#01
  ld (ix+#02),a
  jp L6D02

; IN:
;   H: Ghost row
;   L: Ghost column
L7071:
  ld a,#0A
  cp l                 
  ret nc               ; Return if column number is less than or equal 10
  add a,a
  cp l                 ; Return if column number is greater then 20
  ret c
  ld hl,L6C59
  ex (sp),hl           ; Move position to the stack and return to L6C59
  ret
;
  nop
  nop
L707F:
  call SetGapingPacMan
  ld bc,(PacManPos)
  call PrintAt
  ld bc,#0006
  call SetPrintColor
  ld a,#25
  ld (PacManDir),a
  ld (PacManLastDir),a
  rst #10
  call ShowReady
  ld b,#02
L709D:
  push bc
  ld b,#A0
  call Wait025
  pop bc
  djnz L709D
  call L76B3
  jp L695B

ResetGameState:
  ld hl,#67C0
  ld de,PacManPos
  ld bc,#002E
  ldir
  ret

; Playing a new game starts here. The screen is cleared at
; this point.
L70B8:
  xor a
  ld (#68B8),a
  inc a
  ld (#711D),a
  ld a,#F0
  ld (#78A3),a
  ld hl,#7889
  ld (#78A1),hl
  ld hl,#0700
  ld (#6A74),hl
  ld (#6EEC),hl
  ld hl,#7F70          ; Pac-Man left gaping symbol address
  ld (PacManChars),hl  ; Store the address
  call SetGapingPacMan ; Set the current Pac-Man character set
  call ResetGameState  ; Initialize the game state
  call ShowMaze        ; Display the maze
  call ShowLiveAttrs   ; Display the live attributes
  call L78A5
  call ShowReady
  call PlayReadySound
  call L76B3
L70F2:
  xor a
  ld (FRAMES),a
  ld (FRAMES+1),a
  ld hl,#0014
  ld (LastGhostPoint),hl
  ld a,#25
  ld (PacManDir),a
  ld (PacManLastDir),a
  call L695B
  ld a,#FF
  ld (#6936),a
  ld a,(LastLiveLow)
  cp #E1
  jr nc,#711E
  ret

; Continue the game after GAME OVER
NextGame:
  pop bc               ; Pop the previous return address
  ld hl,ReEnterGame    ; Push the continuation addres
  push hl              ; to the stack and
  ret                  ; Return to that address

  ld bc,#07CD
  ld a,h
  ld b,#17
  call CL_LINE
  ld a,(#711D)
  cpl
  inc a
  ld (#711D),a
  cp #01
  call z,L7A73
  ld hl,#7F70          ; Pac-Man left gaping symbol address
  ld (PacManChars),hl  ; Store the address
  call SetGapingPacMan ; Set the current Pac-Man character set
  ld bc,#0100
  call PrintAt
  ld bc,#02E0
  ld de,PLAYGROUND
  call PR_STRING
  ld bc,#0300
  ld hl,PG_ATTRS
  ld de,#5800
  ldir
  call ShowLiveAttrs
  call L78A5
  call ShowReady
  ld b,#02
L7161:
  push bc
  ld b,#A0
  call Wait025
  pop bc
  djnz L7161
  call L76B3
  ld hl,(#6A74)
  ld bc,#08F0
  and a
  sbc hl,bc
  jp nc,L70F2
  ld hl,(#6A74)
  ld bc,#0040
  add hl,bc
  ld (#6A74),hl
  ld (#6EEC),hl
  jp L70F2
L7189:
  push ix
  pop de
  push de
  push de
  pop hl
  ld bc,#0030
  and a
  sbc hl,bc
  ld bc,#0008
  ldir
  pop de
  ld hl,Ghost0State
  and a
  sbc hl,de
  jr nz,L71B9
  ld a,(GameFlags)
  bit 5,a
  jr z,L71AF
  res 0,a
  ld (GameFlags),a
L71AF:
  ld a,(GhostFlags)
  res 0,a
  ld (GhostFlags),a
  jr L7205
L71B9:
  ld hl,Ghost1State
  and a
  sbc hl,de
  jr nz,L71D3
  ld a,(GameFlags)
  res 1,a
  ld (GameFlags),a
  ld a,(GhostFlags)
  res 1,a
  ld (GhostFlags),a
  jr L7205
L71D3:
  ld hl,Ghost2State
  and a
  sbc hl,de
  jr nz,L71ED
  ld a,(GameFlags)
  res 2,a
  ld (GameFlags),a
  ld a,(GhostFlags)
  res 2,a
  ld (GhostFlags),a
  jr L7205
L71ED:
  ld hl,Ghost3State
  and a
  sbc hl,de
  jr nz,L7205
  ld a,(GameFlags)
  res 3,a
  ld (GameFlags),a
  ld a,(GhostFlags)
  res 3,a
  ld (GhostFlags),a
L7205:
  xor a
  ld (#6817),a
  ld a,(GameFlags)
  cpl
  inc a
  push af
  pop de
  bit 4,e
  ret z
  xor a
  ld (FRAMES),a
  ld (FRAMES+1),a
  inc a
  ld (GameFlags),a
  ld hl,#0014
  ld (LastGhostPoint),hl
  ld hl,#67C4
  ld de,Ghost0State
  ld bc,#0020
  ldir
  ret

L7230:
  ld (#6814),a
L7233:
  ld hl,Ghost0State
L7236:
  push ix
  pop de
  push hl
  and a
  sbc hl,de
  pop hl
  jr z,L7250
  push hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  ld l,(ix+#00)
  ld h,(ix+#01)
  and a
  sbc hl,de
  pop hl
  jr z,L7256
L7250:
  ld bc,#0008
  add hl,bc
  jr L7236
L7256:
  ld a,(#6814)
  cp #00
  jr nz,L7273
  inc hl
  inc hl
  ld a,(ix+#02)
  cpl
  inc a
  ld (hl),a
  inc hl
  ld a,(ix+#03)
  cpl
  inc a
  ld (hl),a
  inc hl
  inc hl
  ld a,(hl)
  ld (ix+#05),a
  ret
L7273:
  ld bc,#0005
  add hl,bc
  ld a,(hl)
  ld (ix+#05),a
  jp L7556
L727E:
  ld a,(PacManPos+1)
  sub (ix+#01)
  ld a,(ix+#02)
  jr c,L7291
  cp #01
  jp z,L6C52
  jp L6C59
L7291:
  cp #FF
  jp z,L6C52
  jp L6C59

; Calculate the new vertical direction of the ghost
; to catch Pac-Man
L7299:
  ld a,(PacManPos)     ; Get the current row of Pac-Man
  sub (ix+#00)         ; Check the relative row position of the ghost
  ld a,(ix+#03)        ; A=current vertical direction
  jr c,L72AC           ; Jump if ghost is below Pac-Man
  cp #01
  jp z,L6C52
  jp L6CAE

; Ghost is below Pac-Man
L72AC:
  cp #FF               ; Does the ghost move toward Pac-Man? 
  jp z,L6C52           ; Yes, keep this direction
  jp L6CAE             ; No, check horizontal movement

; The address where the Pac-Man characters are stored within
; the character generator
// $72B4
PacManChars
  .defw #7F70

; Sets the Pac-Man symbols to the "gaping Pac-Man" set
SetGapingPacMan:
  ld hl,#7F70          ; Pac-Man left gaping symbol address
  jr CopyPacmanChars

; Sets the Pac-Man symbols to the "normal Pac-Man" set
SetNormalPacMan:
  ld hl,#7F90          ; Initial Pac-Man left symbol address

; Copy the character bitmaps within the font definition
CopyPacmanChars:
  ld de,#7D28          ; Pac-Man left symbol address (to print)
  ld bc,#0020          ; 32 bytes, 4 characters
  ldir
  ret

; Displays the gaping Pac-Man to the position specified in BC
; IN:
;   B: row position
;   C: column position
; Remark Stores the previous Pac-Man symbol as the current
ShowGapingPacMan:
  push bc
  call SetGapingPacMan
  pop bc
  jp ShowPacMan

AimatePacMan:
  ld a,(#7A8B)
  rra
  jr c,SetGapingPacMan
  jr SetNormalPacMan

; Stores the address of the last printed ghost symbol
LastGhostAddr:
  .defw #7FB0

; Flips the ghost symbol within the character set
; to animate ghost movement
FlipGhost:
  ld hl,(LastGhostAddr); HL = symbol address of the last printed ghost
  push hl              ; Save the address
  ld de,#7D48          ; The address of ghost symbol to print
  ld bc,#0008          ; 8 bytes in the character
  push bc              ; Save the counter;
  ldir                 ; Copy the character set
  pop bc
  pop hl               ; Restore regs
  add hl,bc
  push hl              ; Now HL points to the new ghost symbol
  ld de,#7FC0
  and a
  sbc hl,de            ; Lets check if HL points to the second ghost symbol
  pop hl               
  jr nz,`storeGhost    ; Yes, HL points to the second symbol
  ld hl,#7FB0          ; Set HL to the first symbol
`storeGhost:
  ld (LastGhostAddr),hl
  ret

; Print ghost in their current position
PrintGhosts:
  ld hl,Ghost0State    ; HL points to the ghost state table
  ld a,(GhostFlags)    ; A=ghost flags
  ld b,#04             ; B=number of ghosts
`nextGhost:
  push bc              ; Save the counter
  sra a                ; Has Pac-Man caught the current ghost?
  push af              ; Save the status
  jr c,`ghostCaught    ; Yes, jump ahead
  ld c,(hl)            ; Get the column coordinate of the ghost to C
  inc hl               ; Move to the row position
  ld b,(hl)            ; Get the row to B
  push hl              ; Save the pointer
  call PrintAt         ; Set print position to the ghost
  pop hl               ; Get back the pointer
  ld bc,#0005          ; Add 5 to HL
  add hl,bc            ; to reach the color offset
  ld b,#00             ; B="PAPER BLACK"
  ld a,(GameFlags)     ; Get game flags
  bit 5,a              ; Chase mode?
  jr nz,`chase
  ld c,(hl)
  jr `display
`chase:
  bit 6,a              ; "Catch mode is about te expire" flag set?
  jr nz,`white         ; Yes, jump
  ld c,#05             ; No, use CYAN ghost color
  jr `display
`white:
  ld c,#07             ; WHITE ghost color 
`display:
  push hl              ; Save state table pointer
  call SetPrintColor   ; Set the color of ghost to display
  pop hl               ; Restore pointer
  ld a,#29             ; A=Ghost symbol
  rst #10              ; Print the ghost
  inc hl               
  inc hl               ; No HL points to the next ghost state record
  pop af               ; Restore the status
  pop bc               ; Restore counter
  djnz `nextGhost      
  ret

; Pac-Man has caught the current ghost
`ghostCaught:
  ld bc,#0008         ; A GHOST record is 8 bytes long
  add hl,bc           ; Move to the next ghost record
  pop af              ; Restore the status
  pop bc              ; Restore counter
  djnz `nextGhost
  ret

;
L7342:
  ld de,#0003
  ld hl,#0400
  ld b,#03
L734A:
  push bc
  push de
  call BEEPER
  dec h
  pop de
  pop bc
  djnz L734A
  ret
L7355:
  push hl
  ld bc,(PacManPos)
  call PrintAt
  ld bc,#0006
  call SetPrintColor
  ld a,#74
  rst #10
  ld a,#08
  rst #10
  ld b,#40
  call Wait025
  ld a,#78
  ld b,#08
L7372:
  push bc
  push af
  rst #10
  call L773A
  ld a,#08
  rst #10
  pop af
  inc a
  pop bc
  djnz L7372
  ld a,#20
  rst #10
  ld a,#08
  rst #10
  call L77AF
  pop hl
  dec hl
  ld a,(hl)
  rst #10
  ret

// $738e
; Probably data/unused
  ld sp,#5D7E
  call #8000
 
 ; The loader enters the code at this point
EntryPoint:
  jp StartInit
  nop
  nop

; Plays the short beeb that signs an object has
; been collected; 
PlayCollectBeep:
  ld b,#02             ; Two short beep loop
`loop:
  push bc              ; Save counter
  ld hl,#00E8
  ld de,#0020
  call BEEPER          ; Play short pitch (higher)
  ld hl,#0118
  ld de,#0020
  call BEEPER          ; Play short pitvh (lower)
  pop bc               ; Restore counter
  djnz `loop           ; Repeat
  ret

; Plays the sound when a ghost is caught
GhostCaughtSound:
  ld hl,#0300          ; Initial pitch value
  ld de,#0009          ; Duration value
  ld b,#15             ; Number of pitches to play
`loop:
  push bc              
  push de 
  push hl              ; Save registers used
  call BEEPER          ; Play the pitch
  pop hl               ; Restore registers
  pop de
  inc de
  ld bc,#0018          ; Decrease the next pitch
  sbc hl,bc            ; with 24
  pop bc               ; Restore the counter
  djnz `loop           ; Repeat
  ret
L73CC:
  xor a
  sub (ix+#04)
  jr nz,L73E9
  ld a,(ix-#30)
  cp (ix+#00)
  jr c,L73DE
  ld a,#FF
  jr L73E0
L73DE:
  ld a,#01
L73E0:
  ld (ix+#03),a
  ld (#6814),a
  jp L7444
L73E9:
  ld a,(ix-#2F)
  cp (ix+#01)
  jr c,L73F5
  ld a,#FF
  jr L73F7
L73F5:
  ld a,#01
L73F7:
  ld (ix+#02),a
  ld (#6814),a
L73FD:
  ld c,(ix+#00)
  ld b,(ix+#01)
  ld a,c
  cp #FF
  jr z,L7444
  cp #1F
  jr z,L7444
  ld a,b
  sub (ix+#02)
  ld b,a
  call GetScreenChar
  ld d,a
  ld a,(PacManDir)
  cp d
  ld a,d
  jp z,L74A3
  cp #4C
  jp z,L74B4
  cp #4B
  jp z,L74B4
  cp #20
  jp z,L74B4
  cp #29
  jr z,L74A3
  cp #77
  jr z,L74A3
  cp #76
  jr z,L74A3
  cp #2A
  jr z,L74A3
  cp #2B
  jr z,L74B4
  cp #2C
  jr z,L74A3
L7444:
  ld c,(ix+#00)
  ld b,(ix+#01)
  ld a,c
  sub (ix+#03)
  ld c,a
  cp #FF
  jr nz,L7455
  ld c,#1E
L7455:
  cp #1F
  jr nz,L745B
  ld c,#00
L745B:
  call GetScreenChar
  ld d,a
  ld a,(PacManDir)
  cp d
  ld a,d
  jr z,L74AB
  cp #4B
  jr z,L74BB
  cp #4C
  jr z,L74BB
  cp #20
  jr z,L74BB
  cp #29
  jr z,L74AB
  cp #77
  jr z,L74AB
  cp #76
  jr z,L74AB
  cp #2B
  jr z,L74BB
  cp #2C
  jr z,L74AB
  ld a,(ix+#04)
  cp #00
  jr z,L7498
  ld a,(ix+#02)
  cpl
  inc a
  ld (ix+#02),a
  jp L73FD
L7498:
  ld a,(ix+#03)
  cpl
  inc a
  ld (ix+#03),a
  jp L73FD
L74A3:
  push af
  xor a
  ld (ix+#04),a
  push bc
  jr L74CE
L74AB:
  push af
  ld a,#01
  ld (ix+#04),a
  push bc
  jr L74CE
L74B4:
  push af
  xor a
  ld (ix+#04),a
  jr L74C1
L74BB:
  push af
  ld a,#01
  ld (ix+#04),a
L74C1:
  push bc
  call PrintAt
  ld bc,#0005
  call SetPrintColor
  ld a,#2B
  rst #10
L74CE:
  pop de
  ld c,(ix+#00)
  ld b,(ix+#01)
  ld (ix+#00),e
  ld (ix+#01),d
  call PrintAt
  ld a,(ix+#05)
  push af
  cp #2C
  call z,L78EF
  cp #2A
  jr nz,L74F0
  ld bc,#0002
  jr L7528
L74F0:
  cp #4B
  jr nz,L74F9
  ld bc,#0006
  jr L7528
L74F9:
  cp #4C
  jr nz,L7502
  ld bc,#0006
  jr L7528
L7502:
  cp #29
  jr z,L750E
  cp #77
  jr z,L750E
  cp #76
  jr nz,L7521
L750E:
  pop af
  jr L752D
L7511:
  call L5EAB
  call L6FDF
  jp L77E1
  ld c,(ix+#07)
  ld b,#00
  jr L7528
L7521:
  pop af
  ld a,#20
  push af
  ld bc,#0006
L7528:
  call SetPrintColor
  pop af
  rst #10
L752D:
  ld bc,(PacManPos)
  call ShowPacMan
  pop af
  cp #29
  jp z,L7230
  cp #77
  jp z,L7230
  cp #76
  jp z,L7230
  cp #2B
  jp z,L7230
  ld d,a
  ld a,(PacManDir)
  cp d
  ld a,d
  jr nz,L7553
  ld a,#20
L7553:
  ld (ix+#05),a
L7556:
  ld l,(ix+#00)
  ld h,(ix+#01)
  ld c,(ix-#30)
  ld b,(ix-#2F)
  and a
  sbc hl,bc
  call z,L7189
  xor a
  ld (#6814),a
  ret
L756D:
  ld a,(FRAMES+1)
  cp #08
  jr c,L758C
  cp #09
  jr nc,L758C
  ld a,(FRAMES)
  cp #C0
  jr c,L758C
  ld a,(GameFlags)
  bit 6,a
  jr nz,L758F
  set 6,a
  ld (GameFlags),a
  ret
L758C:
  ld a,(GameFlags)
L758F:
  res 6,a
  ld (GameFlags),a
  ret
L7595:
  call PositionPacMan
  ld ix,Ghost0State
  ld b,#04
L759E:
  push bc
  ld bc,(PacManPos)
  ld l,(ix+#00)
  ld h,(ix+#01)
  and a
  sbc hl,bc
  jr nz,L75C6
  ld a,(ix+#05)
  cp #4B
  jr nz,L75C1
  ld a,(GhostFlags)
  bit 7,a
  jr nz,L75C1
  set 7,a
  ld (GhostFlags),a
L75C1:
  ld a,#20
  ld (ix+#05),a
L75C6:
  ld bc,#0008
  add ix,bc
  pop bc
  djnz L759E
  ld a,(GhostFlags)
  bit 7,a
  ret z
  res 7,a
  ld (GhostFlags),a
  jp DotCollected

; "Get ready" sound sample, 3 bytes per sample
READY_SOUND: // $75DC
  .defb #6A, #06, #14, #26, #03, #27, #3E, #04
  .defb #1D, #6A, #06, #14, #26, #03, #69, #3E
  .defb #04, #3A, #00, #00, #0A, #0C, #06, #15
  .defb #F7, #02, #2A, #FF, #03, #1F, #0C, #06
  .defb #15, #F7, #02, #6F, #FF, #03, #3E, #00
  .defb #00, #0A, #6A, #06, #14, #26, #03, #27
  .defb #3E, #04, #1D, #6A, #06, #14, #26, #03
  .defb #69, #3E, #04, #3A, #00, #00, #0A, #C7
  .defb #04, #1A, #80, #04, #1C, #3E, #04, #1D
  .defb #00, #00, #0A, #3E, #04, #1D, #FF, #03
  .defb #1F, #C4, #03, #21, #00, #00, #0A, #C4
  .defb #03, #21, #8C, #03, #23, #58, #03, #25
  .defb #00, #00, #0A, #26, #03, #69

; Plays the "Get Ready" sound
PlayReadySound:
  ld ix,READY_SOUND    ; IX point to the sound table
  ld b,#22             ; 34 samples
L7648:
  push bc              ; Save the counters
  ld l,(ix+#00)        
  ld h,(ix+#01)        ; HL=pitch value
  ld e,(ix+#02)
  ld d,#00             ; DE=frequency value
  push ix              ; Save sample address
  ld a,h               
  or l                 ; Is the pitch value 0?
  jr nz,`playSound     ; Now, go on playing the sound
  ld b,e               ; Take a short pause
  call Wait025         ; (B*0.25 milliseconds)
  jr `nextSample
`playSound:
  call BEEPER          ; Now, play the sound sample
`nextSample:
  pop bc
  inc bc
  inc bc
  inc bc               ; BC points to the next sample
  push bc              ; Save the address
  ld hl,#7618          ; The address of 20th sample
  and a
  sbc hl,bc            ; Are we over the 20th sample?
  ld a,b
  jr c,L7676           ; Yes, jump ahead
  ld b,#0D             ; Make a short pause
  call Wait025         ; (13*0.25 milliseconds)
L7676:
  cp #79
  call nc,L7A8D        ; While the address is below #7900, call into
  pop ix
  pop bc
  djnz L7648
  ret
  xor d
L7682:
  call L6DF0
  ld a,(GameFlags)
  bit 5,a
  ret nz
  ld c,(ix+#00)
  ld b,(ix+#01)
  ld a,b
  cp #0B
  ret nz
  jp L7A41

ShowReady:
  ld bc,#0D0D          ; AT 13,13
  call PrintAt
  ld bc,#0007          ; PAPER BLACK, INK WHITE
  call SetPrintColor   ; Set the color
  ld de,READY_MSG      ; "READY!" text
  ld bc,#0006          ; 6 characters
  call PR_STRING       ; Print the string
  ld a,#35             ; Make as if "5" (left) was pressed
  ld (LAST_K),a        ; To set Pac-Mac moving left
  ret
L76B3:
  ld bc,#0D0D
  call PrintAt
  ld b,#06
L76BB:
  push bc
  ld a,#20
  rst #10
  pop bc
  djnz L76BB
  ret

; Some data 
// $76c3
READY_MSG:
  .defm "UVWXY!"       ; "READY!" with graphical characters

// $76C9
  .defb #1A, #77

L76CB:
  ld a,(GhostFlags)
  cp #00
  jp nz,L798D
  ld a,(GameFlags)
  bit 5,a
  ret nz
  ld ix,(#76C9)        ; IX points to the current sound sample
  ld l,(ix+#00)        ; 
  ld h,(ix+#01)
  ld d,#00
  ld e,(ix+#02)
  inc ix
  inc ix
  inc ix
  push ix
  call BEEPER
  pop bc
  ld hl,GOSampleAddr
  and a
  sbc hl,bc
  jr nz,L7703
  ld hl,#7708
  ld (#76C9),hl
  ret
L7703:
  ld (#76C9),bc
  ret

; Some data 
// $7708

GameSoundSamples:
  .defb #26, #03, #02, #CB, #02, #02, #7A, #02
  .defb #03, #31, #02, #03, #F0, #01, #04, #B8
  .defb #01, #04, #84, #01, #05, #56, #01, #05
  .defb #2D, #01, #06, #56, #01, #05, #84, #01
  .defb #05, #B8, #01, #04, #F0, #01, #04, #31
  .defb #02, #03, #7A, #02, #03, #CB, #02, #02

; Stores the pointer to the next game over sound sample
; to play
// $7738
GOSampleAddr:
  .defw #776F

L773A:
  ld ix,(GOSampleAddr)
  ld b,#04             ; Play every sample for times
`loop:
  push bc
  ld l,(ix+#00)        ; Get the frequency value into HL
  ld h,(ix+#01)
  ld de,#0015          ; Get duration value
  inc ix               
  inc ix               ; Move to the next sample
  push ix              ; Save sample address
  call BEEPER          ; Make the beep
  pop ix               ; Restore sample address
  pop bc               ; Restore sample
  djnz `loop           ; and loop until counter is zero
  push ix
  pop de               ; DE point to the next sample address
  ld hl,EndOfGOSample  ; HL points to the end of sample stream
  and a
  sbc hl,de            ; Check if this address reached
  jr nz,`nextSample    ; No, there are other samples
  ld hl,GOSample ; Reset the sample stream
  ld (GOSampleAddr),hl
  ret
`nextSample:
  ld (GOSampleAddr),de
  ret

; Samples for the Game Over sound
// $776f
GOSample:
  .defb #10, #02, #EC, #01, #E2, #01, #FB, #01
  .defb #31, #02, #6C, #02, #8D, #02, #7F, #02
  .defb #54, #02, #2C, #02, #20, #02, #3D, #02
  .defb #79, #02, #BC, #02, #E1, #02, #D1, #02
  .defb #A1, #02, #74, #02, #67, #02, #87, #02
  .defb #CB, #02, #15, #03, #3E, #03, #2D, #03
  .defb #F7, #02, #C4, #02, #B6, #02, #DA, #02
  .defb #26, #03, #7A, #03, #A8, #03, #95, #03
EndOfGOSample:


L77AF:
  ld b,#02
L77B1:
  push bc
  ld de,#0005
  ld hl,#0400
  ld b,#08
L77BA:
  push bc
  push de
  push hl
  call BEEPER
  pop hl
  pop de
  inc de
  ld bc,#0060
  sbc hl,bc
  pop bc
  djnz L77BA
  ld b,#08
L77CD:
  push bc
  push de
  push hl
  call BEEPER
  pop hl
  pop de
  dec de
  ld bc,#0060
  add hl,bc
  pop bc
  djnz L77CD
  pop bc
  djnz L77B1
  ret
L77E1:
  ld bc,#0006
  add hl,bc
  ld b,#04
L77E7:
  push bc
  push hl
  ld bc,(PacManPos)
  call PrintAt
  ld b,#00
  pop hl
  push hl
  ld c,(hl)
  call SetPrintColor
  ld a,#29
  rst #10
  call FlipGhost
  ld b,#40
  call Wait025
  pop hl
  pop bc
  djnz L77E7
  ret

; Displays the remaining lives
ShowLiveAttrs:
  ld a,(LastLiveLow)
  ld hl,#5AE1          ; The attribute address of the first character
                       ; That represents Pac-Man's remaining lives
`loop:
  cp l                 ; Did we display the last live attr?
  ret z                ; Yes, finshed.
  ld b,#46             ; BRIGHT INK YELLOW
  ld (hl),b            ; Set the attribute value
  inc hl
  inc hl               ; Move two columns right
  jr `loop             ; Repeat until all lives displayed

; Uses the number in L to display a small point
SmallScoreInL:
  nop
  nop
  ld a,l               ; A=Current point to display
  cp #14               ; Is it 20?
  jr nz,`check40       ; No, jump
  ld a,#3A             ; Yes, jump to display small "2"
  jr ShowSmallScore
`check40:
  cp #28               ; Is it 40?
  jr nz,`check80       ; No, jump
  ld a,#3B             ; Yes, jump to display small "4"
  jr ShowSmallScore
`check80:
  cp #50               ; Is it 80?
  jr nz,`check160      ; No, jump to display small "16'
  ld a,#3C             ; Dispaly small "8"
  jr ShowSmallScore
`check160:
  ld a,#3D             ; Small "16"

; Displays score value in small letters
ShowSmallScore:
  push af              ; Save the point character
  ld bc,(PacManPos)    ; BC=Pa-Man's position
  call PrintAt         ; Set the print position there
  push bc              ; Save the position
  ld bc,#0007          ; PAPER BLACK, INK WHITE
  call SetPrintColor   ; Set the color
  pop bc               ; Restore position
  pop af               ; Restore character to print
  rst #10              ; Print the point character
  inc c                ; Next column
  call GetScreenChar   ; Obtain the character behind the "0" digit
                       ; of the small score value
  ld (TempChar),a      ; Store it temporarily
  ld a,#3E             ; Small "00"
  rst #10              ; Display it
  ret                  ; Finished

;
  ld a,#06
  ld (FRAMES),a
  ld a,(#681B)
  cp #09
  jp z,L6B15
  cp #0F
  jp z,L6B03
  cp #10
  jp z,L6B15
  jp L6EA4

; Stores the character behind the small "00" 
; when prints a small score value
// $786B
TempChar:
  .defb #66

L786C:
  ld bc,#0D0F
  call PrintAt
  ld b,#00
  ld a,(#78A4)
  ld c,a
  call SetPrintColor
  ld a,#2C
  rst #10
  ret
L787F:
  ld bc,#0D0F
  call PrintAt
  ld a,#20
  rst #10
  ret

; Some data
  ret c
  ld a,(hl)
  ld (bc),a
  ret po
  ld a,(hl)
  ld (bc),a
  ret pe
  ld a,(hl)
  ld b,#F0
  ld a,(hl)
  ld (bc),a
  ret m
  ld a,(hl)
  inc b
  sbc a,b
  ld a,(hl)
  dec b
  and b
  ld a,(hl)
  ld b,#D0
  ld a,(hl)
  dec b
  adc a,h
  ld a,b
  pop af
  ld (bc),a

L78A5:
  call ShowHiScore
  ld ix,(#78A1)
  push ix
  pop hl
  ld de,#78A1
  and a
  sbc hl,de
  jr z,L78D5
  ld l,(ix+#00)
  ld h,(ix+#01)
  ld de,#7D60
  ld bc,#0008
  ldir
  ld a,(ix+#02)
  ld (#78A4),a
  inc ix
  inc ix
  inc ix
  ld (#78A1),ix
L78D5:
  ld a,(#78A3)
  inc a
  ld (#78A3),a
  ld b,#00
L78DE:
  cp #F0
  ret c
  ld h,#5A
  ld l,a
  ld (hl),b
  inc a
  jr L78DE
L78E8:
  pop hl
  ld hl,#6DA4
  push hl
  jr L78F4
L78EF:
  pop hl
  ld hl,#7528
  push hl
L78F4:
  ld a,(#78A4)
  ld b,#00
  ld c,a
  ret
L78FB:
  call PositionPacMan
L78FE:
  ld hl,(#78A1)
  ld a,(hl)
  cp #E0
  jr nz,L790B
  ld bc,#000A
  jr L7944
L790B:
  cp #E8
  jr nz,L7914
  ld bc,#001E
  jr L7944
L7914:
  cp #F0
  jr nz,L791D
  ld bc,#0032
  jr L7944
L791D:
  cp #F8
  jr nz,L7926
  ld bc,#0046
  jr L7944
L7926:
  cp #98
  jr nz,L792F
  ld bc,#0064
  jr L7944
L792F:
  cp #A0
  jr nz,L7938
  ld bc,#00C8
  jr L7944
L7938:
  cp #D0
  jr nz,L7941
  ld bc,#012C
  jr L7944
L7941:
  ld bc,#01F4
L7944:
  call L5E80
  ld hl,(CurrentScore)
  add hl,bc
  ld (CurrentScore),hl
  push hl
  ld bc,#0006
  call PrintAt
  pop hl
  call PrintScore
  call SetHiScore
  ret

; Set the Hi-Score, provided the current game score
; is higher than the previous Hi-Score
SetHiScore:
  ld de,(HiScore)      ; DE=previous Hi-Score
  ld hl,(CurrentScore) ; HL=current game score
  push hl              ; Save current score
  and a                ; Reset Carry
  sbc hl,de            ; Is there a new Hi-Score?
  pop hl               ; Restore current score
  ret c                ; No, go back
  ld (HiScore),hl      ; Yes, store the new point
  call ShowHiScore
  ret

;
L7971:
  ld hl,#2000
  ld de,#0005
  ld b,#05
L7979:
  push bc
  push de
  push hl
  call BEEPER
  pop hl
  pop de
  ld bc,#0500
  and a
  sbc hl,bc
  pop bc
  djnz L7979
  ret
  ld h,#77
L798D:
  ld ix,(#798B)
  ld l,(ix+#00)
  ld h,(ix+#01)
  ld e,(ix+#02)
  ld d,#00
  ld bc,#0020
  and a
  sbc hl,bc
  inc e
  inc e
  push ix
  call BEEPER
  pop bc
  inc bc
  inc bc
  inc bc
  ld hl,GOSampleAddr
  and a
  sbc hl,bc
  push bc
  pop hl
  jr nz,L79BA
  ld hl,#7720
L79BA:
  ld (#798B),hl
  ret

; Displays the Hi-Score information
ShowHiScore:
  ld bc,#0019          ; AT 0, 19
  call PrintAt
  ld hl,(HiScore)      ; HL=Hi-Score 
  call PrintScore      ; Display it
  ret                  ; Finished

; Some data
// $79cb
  .defb #C7, #04, #34, #C7, #04, #34, #C7, #04
  .defb #34, #B4, #05, #16, #6A, #06, #14, #C7
  .defb #04, #34, #C7, #04, #34, #C4, #03, #42
  .defb #00, #00, #20, #C7, #04, #34, #C7, #04
  .defb #34, #C7, #04, #34, #B4, #05, #16, #6A
  .defb #06, #14, #C7, #04, #34, #C7, #04, #34
  .defb #B4, #05, #2C, #00, #00, #20, #C7, #04
  .defb #34, #C7, #04, #34, #C7, #04, #34, #B4
  .defb #05, #16, #6A, #06, #14, #C7, #04, #34
  .defb #C7, #04, #34, #FF, #03, #3E, #C4, #03
  .defb #42, #8C, #03, #46, #58, #03, #4A, #8C
  .defb #03, #46, #C4, #03, #42, #FF, #03, #3E
  .defb #C7, #04, #34, #FF, #03, #3E, #C7, #04
  .defb #34, #00, #00, #40

L7A37:
  ld ix,#79CB
  ld b,#24
  call L7648
  ret
L7A41:
  ld a,c
  cp #03
  jr c,L7A49
  cp #1C
  ret c
L7A49:
  ld a,(#7681)
  rrca
  ret c
  pop bc
  ret
L7A50:
  ld hl,#7681
  rrc (hl)
  call L7BD2
  ret
L7A59:
  ld a,(LAST_K)
  cp #53
  jp nz,L6B8F
  ld hl,#6955
  ld (#69D6),hl
  ld a,#D8      ; Opcode of RET C
  ld (#7050),a
  pop bc
  pop bc
  ld hl,#5DAA
  push hl
  ret
L7A73:
  ld a,#FF
  ld (#7A8A),a
  ld hl,#0E20
  ld (#7A8B),hl
  call L7A37
  ld a,#01
  ld (#7A8A),a
  call L7A37
  ret
; Some data
// $7a8a
  .defb #01
; Some data
// $7a8b
  .defb #20, #0E

L7A8D:
  call AimatePacMan
  call FlipGhost
  ld a,(#7A8A)
  cp #01
  jr z,L7AF2
  ld bc,(#7A8B)
  add a,c
  ld c,a
  ld (#7A8B),bc
  cp #1F
  jr nc,L7ABA
  cp #C8
  jr nc,L7ABA
  push bc
  call PrintAt
  ld bc,#0006
  call SetPrintColor
  ld a,#25
  rst #10
  pop bc
L7ABA:
  inc c
  ld a,c
  cp #1F
  jr nc,L7ACA
  cp #C8
  jr nc,L7ACA
  call PrintAt
  ld a,#20
  rst #10
L7ACA:
  inc c
  inc c
  ld a,c
  cp #1F
  jr nc,L7AE3
  cp #C8
  jr nc,L7AE3
  push bc
  call PrintAt
  ld bc,#0002
  call SetPrintColor
  ld a,#29
  rst #10
  pop bc
L7AE3:
  inc c
  ld a,c
  cp #1F
  ret nc
  cp #C8
  ret nc
  call PrintAt
  ld a,#20
  rst #10
  ret
L7AF2:
  call L7B8E
  ld bc,(#7A8B)
  ld a,(#7A8A)
  add a,c
  ld c,a
  ld (#7A8B),bc
  cp #1F
  jr nc,L7B18
  cp #C8
  jr nc,L7B18
  call PrintAt
  ld a,#20
  rst #10
  dec b
  call PrintAt
  ld a,#20
  rst #10
  inc b
L7B18:
  inc c
  ld a,c
  cp #1F
  jr nc,L7B3F
  cp #C8
  jr nc,L7B3F
  push bc
  call PrintAt
  ld bc,#0006
  call SetPrintColor
  ld a,#41
  rst #10
  pop bc
  push bc
  dec b
  call PrintAt
  ld bc,#0006
  call SetPrintColor
  ld a,#3F
  rst #10
  pop bc
L7B3F:
  inc c
  ld a,c
  cp #1F
  jr nc,L7B66
  cp #C8
  jr nc,L7B66
  push bc
  call PrintAt
  ld bc,#0006
  call SetPrintColor
  ld a,#42
  rst #10
  pop bc
  push bc
  dec b
  call PrintAt
  ld bc,#0006
  call SetPrintColor
  ld a,#40
  rst #10
  pop bc
L7B66:
  inc c
  inc c
  ld a,c
  cp #1F
  jr nc,L7B77
  cp #C8
  jr nc,L7B77
  call PrintAt
  ld a,#20
  rst #10
L7B77:
  inc c
  ld a,c
  cp #1F
  ret nc
  cp #C8
  ret nc
  call PrintAt
  ld bc,#0005
  call SetPrintColor
  ld a,#29
  rst #10
  ret
; Some data
// $7B8C
  .defw #7E38

L7B8E:
  ld hl,(#7B8C)
  push hl
  ld de,#7DF8
  ld bc,#0020
  push bc
  ldir
  pop bc
  pop hl
  add hl,bc
  push hl
  ld de,#7E58
  and a
  sbc hl,de
  pop hl
  jr nz,L7BAB
  ld hl,#7DF8
L7BAB:
  ld (#7B8C),hl
  ret
L7BAF:
  ld a,(GameFlags)
  bit 5,a
  ret z
  ld a,(GhostFlags)
  cp #00
  ret nz
  ld hl,#0300
  ld de,#0005
  ld b,#04
L7BC3:
  push bc
  push de
  push hl
  call BEEPER
  pop hl
  pop de
  inc h
  dec de
  pop bc
  djnz L7BC3
  ret
  nop
L7BD2:
  ld hl,(CurrentScore)
  ld de,#03E8
  and a
  sbc hl,de
  jr nc,L7BE2
  xor a
  ld (#7BD1),a
  ret
L7BE2:
  ld a,(#7BD1)
  cp #00
  ret nz
  cpl
  ld (#7BD1),a
  ld a,(LastLiveLow)
  inc a
  inc a
  ld (LastLiveLow),a
  call ShowLiveAttrs
  ld a,#01
  ld (#739E),a
  call PlayCollectBeep
  ld a,#00
  ld (#739E),a
  ret
  nop
  nop
  ld b,#04
L7C09:
  push bc
  ld bc,#5ADF
  ld hl,#5800
  push bc
  push hl
L7C12:
  ld a,(hl)
  cp #41
  jr nz,L7C1A
  ld a,#07
  ld (hl),a
L7C1A:
  inc hl
  push hl
  and a
  sbc hl,bc
  pop hl
  jr nz,L7C12
  ld b,#40
  call Wait025
  pop hl
  pop bc
L7C29:
  ld a,(hl)
  cp #07
  jr nz,L7C31
  ld a,#41
  ld (hl),a
L7C31:
  inc hl
  push hl
  and a
  sbc hl,bc
  pop hl
  jr nz,L7C29
  ld b,#40
  call Wait025
  pop bc
  djnz L7C09
  ret
L7C42:
  ld a,(GhostFlags)
  cp #00
  jr nz,L7C4F
  ld a,#FF
  ld (#6936),a
  ret
L7C4F:
  ld b,#04
  ld d,#FF
L7C53:
  push bc
  sra a
  push af
  jr nc,L7C60
  ld a,d
  sub #32
  ld d,a
  ld (#6936),a
L7C60:
  pop af
  pop bc
  djnz L7C53
  ret

; Clears the entire screen
ClearScreen: // $7C65
  ld bc,#0000          
  call PrintAt     ; Set the print position to the AT 0, 0
  ld b,#18
  call CL_LINE     ; Clear all the 24 lines
  ret


Init:
  xor a            ; A := 0
  ld (DF_SZ),a     ; No lines in the lower part of the screen
  ld (PillAttr),a
  ld (FRAMES+1),a
  ld a,#C9         ; Opcode of RET
  ld (#7050),a
  ld a,#F0
  ld (#78A3),a
  ld hl,#7889
  ld (#78A1),hl
  call ResetGameState
  call ClearScreen
  call ShowMaze
  call ShowLiveAttrs
  call L78A5
  ld hl,#7851
  ld (#69D6),hl
  call L605C
  ld hl,POINTS_MSG
  ld b,#E5
  call PrintMsg
  call L61A6

; Continue the game from this point after
; GAME OVER
 ReEnterGame:
  call ClearScreen
  ld hl,SCORES_MSG
  ld b,#78
  call PrintMsg
  ld hl,HiScoreTable
  ld de,#0209
  ld b,#05
L7CC1:
  push bc
  push de
  pop bc
  push bc
  push hl
  call PrintAt
  ld bc,#0005
  call SetPrintColor
  pop hl
  ld b,#03
L7CD2:
  ld a,(hl)
  rst #10
  inc hl
  djnz L7CD2
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  push hl
  ex de,hl
  ld b,#04             ; Set counter to 4
`loop:
  ld a,' '
  rst #10              ; Print space
  djnz `loop           ; Complete the loop
  call PrintHL
  ld a,#30
  rst #10
  pop hl
  pop de
  inc d
  inc d
  pop bc
  djnz L7CC1
  ld hl,SELECT_MSG
  call L5ED8
  jp Init

; Plays a new game
PlayNewGame:
  call ClearScreen
  jp L70B8

  .comparebin "../MemoryFiles/PacManMemory.bin"

; Character set bitmaps
  .org #7D00
; $20, $7D00
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ........
; $21, $7D08
  .defg ........
  .defg ...X....
  .defg ...X....
  .defg ...X....
  .defg ...X....
  .defg ........
  .defg ...X....
  .defg ........
; $22, $7D10
  .defg ........
  .defg .....X..
  .defg .....X..
  .defg .....X..
  .defg .....X..
  .defg .....X..
  .defg .....X..
  .defg ........
; $23, $7D18
  .defg ........
  .defg ..XXXX..
  .defg .....X..
  .defg ..XXXX..
  .defg .....X..
  .defg .....X..
  .defg ..XXXX..
  .defg ........
; $24, $7D20
  .defg ........
  .defg ..XXXX..
  .defg ..X.....
  .defg ..XXXX..
  .defg .....X..
  .defg .....X..
  .defg ..XXXX..
  .defg ........
; $25, $7D28
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ....XXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $26, $7D30
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXX.XXXX
  .defg XXX.XXXX
  .defg .XX.XXX.
  .defg ..X.XX..
; $27, $7D38
  .defg ..XX.X..
  .defg .XXX.XX.
  .defg XXXX.XXX
  .defg XXXX.XXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $28, $7D40
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXX....
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $29, $7D48
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg X..X..XX
  .defg X..X..XX
  .defg XXXXXXXX
  .defg XX.XX.XX
  .defg X..X..X.
  .defg X..X..X.
; $2A, $7D50
  .defg ........
  .defg ........
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ........
  .defg ........
  .defg ........
 ; $2B, $7D58
  .defg ........
  .defg ........
  .defg XXX..XXX
  .defg X.X..X.X
  .defg XXX..XXX
  .defg ........
  .defg ........
  .defg ........
 ; Cherry ($2C), $7D60 
  .defg ....X...
  .defg ....X...
  .defg ...X....
  .defg ..X.X...
  .defg .X...X..
  .defg XXX.XXX.
  .defg .X...X..
  .defg ........
; 20 ($2D), $7D68 
  .defg ........
  .defg XXX.XXX.
  .defg ..X.X.X.
  .defg XXX.X.X.
  .defg X...X.X.
  .defg X...X.X.
  .defg XXX.XXX.
  .defg ........
; 30 ($2E), $7D70
  .defg ........
  .defg XXX.XXX.
  .defg ..X.X.X.
  .defg XXX.X.X.
  .defg ..X.X.X.
  .defg ..X.X.X.
  .defg XXX.XXX.
  .defg ........
; 50 ($2F), $7D78
  .defg ........
  .defg XXX.XXX.
  .defg X...X.X.
  .defg XXX.X.X.
  .defg ..X.X.X.
  .defg ..X.X.X.
  .defg XXX.XXX.
  .defg ........
; 0 ($30), $7D80
  .defg ........
  .defg ..XXXX..
  .defg .X...XX.
  .defg .X..X.X.
  .defg .X.X..X.
  .defg .XX...X.
  .defg ..XXXX..
  .defg ........
; 1 ($31), $7D88
  .defg ........
  .defg ...XX...
  .defg ..X.X...
  .defg ....X...
  .defg ....X...
  .defg ....X...
  .defg ..XXXXX.
  .defg ........
; 2 ($32), $7D90
  .defg ........
  .defg ..XXXX..
  .defg .X....X.
  .defg ......X.
  .defg ..XXXX..
  .defg .X......
  .defg .XXXXXX.
  .defg ........
; 3 ($33), $7D98
  .defg ........
  .defg ..XXXX..
  .defg .X....X.
  .defg ....XX..
  .defg ......X.
  .defg .X....X.
  .defg ..XXXX..
  .defg ........
; 4 ($34), $7DA0
  .defg ........
  .defg ....X...
  .defg ...XX...
  .defg ..X.X...
  .defg .X..X...
  .defg .XXXXXX.
  .defg ....X...
  .defg ........
; 5 ($35), $7DA8
  .defg ........
  .defg .XXXXXX.
  .defg .X......
  .defg .XXXXX..
  .defg ......X.
  .defg .X....X.
  .defg ..XXXX..
  .defg ........
; 6 ($36), $7DB0
  .defg ........
  .defg ..XXXX..
  .defg .X......
  .defg .XXXXX..
  .defg .X....X.
  .defg .X....X.
  .defg ..XXXX..
  .defg ........
; 7 ($37), $7DB8
  .defg ........
  .defg .XXXXXX.
  .defg ......X.
  .defg .....X..
  .defg ....X...
  .defg ...X....
  .defg ...X....
  .defg ........
; 8 ($37), $7DC0
  .defg ........
  .defg ..XXXX..
  .defg .X....X.
  .defg ..XXXX..
  .defg .X....X.
  .defg .X....X.
  .defg ..XXXX..
  .defg ........
; 9 ($39), $7DC8
  .defg ........
  .defg ..XXXX..
  .defg .X....X.
  .defg .X....X.
  .defg ..XXXXX.
  .defg ......X.
  .defg ..XXXX..
  .defg ........
; Small 2 ($3A), $7DD0  
  .defg ........
  .defg ..XXXX..
  .defg ..X..X..
  .defg .....X..
  .defg ..XXXX..
  .defg ..X.....
  .defg ..XXXX..
  .defg ........
; Small 4 ($3B), $7DD8
  .defg ........
  .defg ..X.....
  .defg ..X.X...
  .defg ..X.X...
  .defg ..XXXX..
  .defg ....X...
  .defg ....X...
  .defg ........
; Small 8 ($3C), $7DE0
  .defg ........
  .defg ..XXXX..
  .defg ..X..X..
  .defg ..XXXX..
  .defg ..X..X..
  .defg ..X..X..
  .defg ..XXXX..
  .defg ........
; Small 16 ($3D), $7DE8
  .defg ........
  .defg .X.XXXX.
  .defg .X.X....
  .defg .X.XXXX.
  .defg .X.X..X.
  .defg .X.X..X.
  .defg .X.XXXX.
  .defg ........
; Small 00 ($3E), $7DF0
  .defg ........
  .defg XXX..XXX
  .defg X.X..X.X
  .defg X.X..X.X
  .defg X.X..X.X
  .defg X.X..X.X
  .defg XXX..XXX
  .defg ........
; $3F, $7DF8
  .defg .....XXX
  .defg ...XXXXX
  .defg ..XXXXXX
  .defg .XXXXXXX
  .defg .XXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
; $40, $7E00,
  .defg XXX.....
  .defg XXXXX...
  .defg XXXXXX..
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
; $41, $7E08
  .defg XXXXXX..
  .defg XXXXXX..
  .defg XXXXXXXX
  .defg .XXXXXXX
  .defg .XXXXXXX
  .defg ..XXXXXX
  .defg ...XXXXX
  .defg .....XXX
; $42, $7E10
  .defg ........
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg XXXXXX..
  .defg XXXXX...
  .defg XXX.....
; $43, $7E18
  .defg .....XXX
  .defg ...XXXXX
  .defg ..XXXXXX
  .defg .XXXXXXX
  .defg .XXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
; $44, $7E20
  .defg XXX.....
  .defg XXXXX...
  .defg XXXXXX..
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
; $45, $7E28
  .defg XXXXXX..
  .defg XXXXXX..
  .defg XXXXXXXX
  .defg .XXXXXXX
  .defg .XXXXXXX
  .defg ..XXXXXX
  .defg ...XXXXX
  .defg .....XXX
; $46, $7E30
  .defg ........
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg XXXXXX..
  .defg XXXXX...
  .defg XXX.....
; $47, $7E38
  .defg .....XXX
  .defg ...XXXXX
  .defg ..XXXXXX
  .defg .XXXXXXX
  .defg .XXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXXXX..
; $48, $7E40
  .defg XXX.....
  .defg XXXXX...
  .defg XXXXXXX.
  .defg XXXXXX..
  .defg XXXX....
  .defg XX......
  .defg ........
  .defg ........
; $49, $7E48
  .defg XXXXXX..
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg .XXXXXXX
  .defg .XXXXXXX
  .defg ..XXXXXX
  .defg ...XXXXX
  .defg .....XXX
; $4A, $7E50
  .defg ........
  .defg ........
  .defg XX......
  .defg XXXX....
  .defg XXXXXX..
  .defg XXXXXXX.
  .defg XXXXX...
  .defg XXX.....
; $4B, $7E58
  .defg ........
  .defg ........
  .defg ........
  .defg ...XX...
  .defg ...XX...
  .defg ........
  .defg ........
  .defg ........
; $4C, $7E60
  .defg ..XXXX..
  .defg ..XXXX..
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ..XXXX..
  .defg ..XXXX..
; $4D, $7E68,
  .defg ........
  .defg ..XXXX..
  .defg .....X..
  .defg .....X..
  .defg .....X..
  .defg .....X..
  .defg .....X..
  .defg ........
; $4E, $7E70
  .defg ........
  .defg .X.XXX..
  .defg .X.X.X..
  .defg .X.X.X..
  .defg .X.X.X..
  .defg .X.X.X..
  .defg .X.XXX..
  .defg ........
; $4F, $7E78
  .defg ........
  .defg ...X....
  .defg ..XX....
  .defg .XXXXXX.
  .defg XXXXXXX.
  .defg .XXXXXX.
  .defg ..XX....
  .defg ...X....
; $50, $7E80
  .defg ........
  .defg ...X....
  .defg ...XX...
  .defg XXXXXX..
  .defg XXXXXXX.
  .defg XXXXXX..
  .defg ...XX...
  .defg ...X....
; $51, $7E88
  .defg ........
  .defg ...X....
  .defg ..XXX...
  .defg .XXXXX..
  .defg XXXXXXX.
  .defg ..XXX...
  .defg ..XXX...
  .defg ..XXX...
; $52, $7E90
  .defg ........
  .defg ..XXX...
  .defg ..XXX...
  .defg ..XXX...
  .defg XXXXXXX.
  .defg .XXXXX..
  .defg ..XXX...
  .defg ...X....
; $53, $7E98
  .defg ........
  .defg ........
  .defg XXXX.XX.
  .defg ...XXXXX
  .defg ...XXXXX
  .defg ...XXXXX
  .defg ....XXX.
  .defg ........
; $54, $7EA0
  .defg ........
  .defg ...X....
  .defg ..XXX...
  .defg .XXXXX..
  .defg .XXXXX..
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg ...X....
; $55, $7EA8
  .defg ........
  .defg .XXXXX..
  .defg .X....X.
  .defg .X....X.
  .defg .XXXXX..
  .defg .X...X..
  .defg .X....X.
  .defg ........
; $56, $7EB0
  .defg ........
  .defg .XXXXXX.
  .defg .X......
  .defg .XXXXX..
  .defg .X......
  .defg .X......
  .defg .XXXXXX.
  .defg ........
; $57, $7EB8
  .defg ........
  .defg ..XXXX..
  .defg .X....X.
  .defg .X....X.
  .defg .XXXXXX.
  .defg .X....X.
  .defg .X....X.
  .defg ........
; $58, $7EC0
  .defg ........
  .defg .XXXX...
  .defg .X...X..
  .defg .X....X.
  .defg .X....X.
  .defg .X...X..
  .defg .XXXX...
  .defg ........
; $59, $7EC8
  .defg ........
  .defg X.....X.
  .defg .X...X..
  .defg ..X.X...
  .defg ...X....
  .defg ...X....
  .defg ...X....
  .defg ........
; $6A, $7ED0
  .defg ........
  .defg .XXXXXX.
  .defg .X....X.
  .defg .XXXXXX.
  .defg ...X....
  .defg ...XX...
  .defg ...X....
  .defg ...XXX..
; $5B, $7ED8
  .defg ....X...
  .defg ....X...
  .defg ...X....
  .defg ..X.X...
  .defg .X...X..
  .defg XXX.XXX.
  .defg .X...X..
  .defg ........
; $5C, $7EE0
  .defg ...X....
  .defg .X.X.X..
  .defg X.X.X.X.
  .defg XX.X.XX.
  .defg X.X.X.X.
  .defg XX.X.XX.
  .defg .XX.XX..
  .defg ..XXX...
; $5D, $7EE8
  .defg .......X
  .defg ..XXX.X.
  .defg .XXXXX..
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg .XXXXX..
  .defg ..XXX...
; $5E, $7EF0
  .defg ...X....
  .defg ...X....
  .defg .XXXXX..
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg XXXXXXX.
  .defg .XXXXX..
  .defg ..XXX...
; $5F, $7EF8
  .defg ........
  .defg ........
  .defg ..XXX...
  .defg .XXXXX..
  .defg XXXXXXX.
  .defg .XXXXX..
  .defg ..XXX...
  .defg ........
; $60, $7F00
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ........
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ........
; $61, $7F08
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
; $62, $7F10
  .defg ........
  .defg ...XXXXX
  .defg ..XXXXXX
  .defg .XXX....
  .defg .XX.....
  .defg .XX...XX
  .defg .XX..XXX
  .defg .XX..XX.
; $63, $7F18
  .defg ........
  .defg XXXXX...
  .defg XXXXXX..
  .defg ....XXX.
  .defg .....XX.
  .defg XX...XX.
  .defg XXX..XX.
  .defg .XX..XX.
; $64, $7F20
  .defg .XX..XX.
  .defg .XX..XXX
  .defg .XX...XX
  .defg .XX.....
  .defg .XXX....
  .defg ..XXXXXX
  .defg ...XXXXX
  .defg ........
; $65, $7F28
  .defg .XX..XX.
  .defg XXX..XX.
  .defg XX...XX.
  .defg .....XX.
  .defg ....XXX.
  .defg XXXXXX..
  .defg XXXXX...
  .defg ........
; $66, $7F30
  .defg ........
  .defg ..XXXXXX
  .defg .XXXXXXX
  .defg .XX.....
  .defg .XX.....
  .defg .XXXXXXX
  .defg ..XXXXXX
  .defg ........
; $67, $7F38
  .defg ........
  .defg XXXXXX..
  .defg XXXXXXX.
  .defg .....XX.
  .defg .....XX.
  .defg XXXXXXX.
  .defg XXXXXX..
  .defg ........
; $68, $7F40
  .defg ........
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
; $69, $7F48
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XX..XX.
  .defg .XXXXXX.
  .defg ..XXXX..
  .defg ........
; $6A, $7F50
  .defg .XX..XX.
  .defg XXX..XXX
  .defg XXX..XXX
  .defg ........
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ........
; $6B, $7F58
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ........
  .defg ........
  .defg XXX..XXX
  .defg XXX..XXX
  .defg .XX..XX.
; $6C, $7F60
  .defg .XX..XX.
  .defg .XX..XXX
  .defg .XX..XXX
  .defg .XX.....
  .defg .XX.....
  .defg .XX..XXX
  .defg .XX..XXX
  .defg .XX..XX.
; $6D, $7F68
  .defg .XX..XX.
  .defg XXX..XX.
  .defg XXX..XX.
  .defg .....XX.
  .defg .....XX.
  .defg XXX..XX.
  .defg XXX..XX.
  .defg .XX..XX.
; $6E, $7F70
  .defg ..XXXX..
  .defg XXXXXXX.
  .defg ..XXXXXX
  .defg ....XXXX
  .defg ....XXXX
  .defg ..XXXXXX
  .defg XXXXXXX.
  .defg ..XXXX..
; $6F, $7F78
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXX..XXX
  .defg XXX..XXX
  .defg .X....X.
  .defg .X....X.
; $70, $7F80
  .defg .X....X.
  .defg .X....X.
  .defg XXX..XXX
  .defg XXX..XXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $71, $7F88
  .defg ..XXXX..
  .defg .XXXXXXX
  .defg XXXXXX..
  .defg XXXX....
  .defg XXXX....
  .defg XXXXXX..
  .defg .XXXXXXX
  .defg ..XXXX..
; $72, $7F90
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg ....XXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $73, $7F98
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXX.XXXX
  .defg XXX.XXXX
  .defg .XX.XXX.
  .defg ..X.XX..
; $74, $7FA0
  .defg ..XX.X..
  .defg .XXX.XX.
  .defg XXXX.XXX
  .defg XXXX.XXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $75, $7FA8
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg XXXX....
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $76, $7FB0
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg XX..X..X
  .defg XX..X..X
  .defg XXXXXXXX
  .defg XX.XX.XX
  .defg .X..X..X
  .defg .X..X..X
; $77, $7FB8
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg X..X..XX
  .defg X..X..XX
  .defg XXXXXXXX
  .defg XX.XX.XX
  .defg X..X..X.
  .defg X..X..X.
; $78, $7FC0
  .defg ........
  .defg .X....X.
  .defg XXX..XXX
  .defg XXX..XXX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $79, $7FC8
  .defg ........
  .defg ........
  .defg X......X
  .defg XX....XX
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $7A, $7FD0
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg XXXXXXXX
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $7B, $7FD8
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ...XX...
  .defg XXXXXXXX
  .defg .XXXXXX.
  .defg ..XXXX..
; $7C, $7FE0
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ...XX...
  .defg ..XXXX..
  .defg .XXXXXX.
  .defg ..XXXX..
; $7D, $7FE8
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ...XX...
  .defg ..XXXX..
  .defg ..XXXX..
; $7E, $7FF0
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ........
  .defg ...XX...
  .defg ...XX...
; $7F, $7FF8
  .defg X......X
  .defg .X....X.
  .defg ..X..X..
  .defg ........
  .defg ........
  .defg ..X..X..
  .defg .X....X.
  .defg X......X

  .comparebin "../MemoryFiles/PacManMemory.bin", 8704